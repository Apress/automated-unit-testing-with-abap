-----------------------------------------------------------------------
  ZAUT101B

    1. Implement class tester with single empty method set_alv_field_catalog NOT marked as for testing:

*======================================================================
*
*   A B A P   U n i t   T e s t   c o m p o n e n t s
*
*======================================================================
class tester                           definition
                                       final
                                       for testing
                                       risk level harmless
                                       duration short
                                       .
  private section.
    methods      : set_alv_field_catalog
                 .
endclass.
class tester                           implementation.
  method set_alv_field_catalog.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT101C

  1. Apply "for testing" to test method set_alv_field_catalog of class tester:

    methods      : set_alv_field_catalog
                     for testing
                 .

-----------------------------------------------------------------------
  ZAUT101D

  1. Include in test method set_alv_field_catalog code to test call to subroutine set_alv_field_catalog:

  method set_alv_field_catalog.
    data         : alv_fieldcat_stack
                                  type slis_t_fieldcat_alv
                 .
    " Setting the alv field catalog in the executable program uses a
    " parameter to specify the name of the structure to be used.  If
    " this name is invalid, no field catalog entries will result.  Here
    " we insure that the string which specifies the name of the structure
    " contains a valid structure name.
    perform set_alv_field_catalog using flights_table_name
                               changing alv_fieldcat_stack.
    call method cl_abap_unit_assert=>assert_not_initial
      exporting
        act                       = alv_fieldcat_stack
        msg                       = 'ALV fieldcatalog is empty'
        .
  endmethod.

-----------------------------------------------------------------------
  ZAUT101F

  1. Change test method set_alv_field_catalog of class tester to use the newer syntax for
     invoking method assert_not_initial of class cl_abap_unit_assert:
     o Replace this statement ...

    call method cl_abap_unit_assert=>assert_not_initial
      exporting
        act                       = alv_fieldcat_stack
        msg                       = 'ALV fieldcatalog is empty'
        .

       ... with this statement:

    cl_abap_unit_assert=>assert_not_initial(
      act                         = alv_fieldcat_stack
      msg                         = 'ALV fieldcatalog is empty'
      ).

-----------------------------------------------------------------------
  ZAUT102A

  1. Add new test method get_flights_via_carrier to class tester to test call to subroutine
     get_flights_via_carrier:
     o add method definition for get_flights_via_carrier to the private section of class tester
       after the definition for method set_alv_field_catalog:

    methods      : o
                   o
                   o
                 , get_flights_via_carrier
                     for testing

     o include the following method implementation after the implementation for method set_alv_field_catalog:

  method get_flights_via_carrier.
    constants    : lufthansa      type s_carr_id value 'LH'
                 , united_airlines
                                  type s_carr_id value 'UA'
                 , american_airlines
                                  type s_carr_id value 'AA'
                 .
    data         : failure_message
                                  type string
                 , flights_entry  like line
                                    of flights_stack
                 , carrier_id_stack
                                  type table
                                    of s_carr_id
                 , carrier_id_entry
                                  like line
                                    of carrier_id_stack
                 .
    " This unit test is modelled after the example unit test presented
    " in the book "ABAP Objects - ABAP Programming in SAP NetWeaver",
    " 2nd edition, by Horst Keller and Sascha Kruger (Galileo Press,
    " 2007, ISBN 978-1-59229-079-6).  Refer to the sample listing 13.3
    " starting on page 964.  Here we insure that the list of flights
    " retrieved contains only those flights for the specified carrier.
    append: lufthansa             to carrier_id_stack
          , united_airlines       to carrier_id_stack
          , american_airlines     to carrier_id_stack
          .
    loop at carrier_id_stack
       into carrier_id_entry.
      concatenate 'Selection of'
                  carrier_id_entry
                  'gives different airlines'
             into failure_message separated by space.
      perform get_flights_via_carrier using carrier_id_entry.
      " We have specified a quit parameter for the next assertion.
      " The default action is to terminate the test method upon encountering
      " an error.  We do not want to terminate this test method with the
      " first error because we intend to run this test for multiple carriers
      " as identified in the outer loop, allowing ABAP Unit test errors to
      " be issued for whichever carriers they apply.
      " Notice also that the vale specified for the quit parameter is a
      " constant defined in class cl_aunit_assert.  Class cl_aunit_assert
      " is the name of the first generation of ABAP Unit assertion class.
      " It still exists and still can be used, but SAP has since superseded
      " this class with the more descriptively named assertion class
      " cl_abap_unit_assert.  We are using the old class name here because its
      " static attributes were not made available to class cl_abap_unit_assert.
      loop at flights_stack
         into flights_entry.
        cl_abap_unit_assert=>assert_equals(
          act                     = flights_entry-carrid
          exp                     = carrier_id_entry
          msg                     = failure_message
          quit                    = cl_aunit_assert=>no
          ).
        if flights_entry-carrid ne carrier_id_entry.
          exit. " loop at flights_stack
        endif.
      endloop.
    endloop.
  endmethod.

-----------------------------------------------------------------------
  ZAUT102C

  1. Add new test method set_alv_function_module_name to class tester to call to subroutine
     set_alv_function_module_name:
     o add method definition for set_alv_function_module_name to the private section of class tester
       after the definition for method get_flights_via_carrier:

    methods      : o
                   o
                   o
                 , set_alv_function_module_name
                     for testing

     o include the following method implementation after the implementation for method get_flights_via_carrier:

  method set_alv_function_module_name.
    constants    : list_flag      type xflag     value space
                 , grid_flag      type xflag     value 'X'
                 .
    data         : alv_display_function_module
                                  type progname
                 .
    " The user may select to display the report using alv classic list
    " or alv grid control.  The function modules facilitating these use
    " the same parameter interface and the name of each one contains the
    " string "LIST" or "GRID" respectively.  Here we insure that we
    " get the correct function module name resolved when we provide the
    " flag indicating whether or not to use the grid control.
    perform set_alv_function_module_name using list_flag
                                      changing alv_display_function_module.
    " Here we use the level parameter to indicate that although we may
    " get the incorrect name of the function module based on the selection
    " flag, it is not a critial error (the default for not specifying level).
    cl_abap_unit_assert=>assert_char_cp(
          act                     = alv_display_function_module
          exp                     = '*LIST*'
          msg                     = 'Incorrect ALV program name selected'
          level                   = cl_aunit_assert=>tolerable
          quit                    = cl_aunit_assert=>no
          ).
    perform set_alv_function_module_name using grid_flag
                                      changing alv_display_function_module.
    cl_abap_unit_assert=>assert_char_cp(
          act                     = alv_display_function_module
          exp                     = '*GRID*'
          msg                     = 'Incorrect ALV program name selected'
          level                   = cl_aunit_assert=>tolerable
          quit                    = cl_aunit_assert=>no
          ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT102E

  1. Aadd new test method apply_flight_discount to class tester to call to subroutine
     apply_flight_discount:
     o add method definition for apply_flight_discount to the private section of class tester
       after the definition for method set_alv_function_module_name:

    methods      : o
                   o
                   o
                 , apply_flight_discount
                     for testing

     o include the following method implementation after the implementation for method set_alv_function_module_name:

  method apply_flight_discount.
    constants    : discount_exceeding_100_percent
                                  type num03     value 101
                 .
    data         : flights_entry  like line
                                    of flights_stack
                 .
    " The user may indicate on the initial selection screen to calculate
    " a percentage discount for the airfares to be shown in the report.
    " The selection screen parameter is 3 digits to accept using a 100
    " percent discount (free flight!).  We do not want the discount to
    " be any higher than 100 percent or the airfares will be shown using
    " negative numbers (the airline would pay you to fly!).  Here we
    " insure that the calculated airfare cannot be negative.
    " Set table flights_stack with some records from the sflights table:
    perform get_flights_via_carrier using 'AA'.
    cl_abap_unit_assert=>assert_not_initial(
      act                         = flights_stack
      msg                         = 'No records available for testing flight discount'
      ).
    perform apply_flight_discount using discount_exceeding_100_percent.
    loop at flights_stack
       into flights_entry.
      " We have not specified a quit parameter for the next assertion.
      " The default action is to terminate the test method upon encountering
      " an error.  We do not need to test every record in the table for
      " a negative value since if any one of them is negative then we
      " should expect all of them to be negative.  So we can exit this
      " loop and this test method with the first negative price.  We are
      " using a loop here just in case the first record we encounter had
      " a full price of zero, which would calculate to a discounted price
      " also of zero regardless of an invalid discount value, and would pass
      " the test if we were to inspect only at the first record in the table.
      cl_abap_unit_assert=>assert_equals(
        act                       = flights_entry-price
        exp                       = abs( flights_entry-price )
        msg                       = 'Discounted airfare is negative value'
        ).
    endloop.
  endmethod.

-----------------------------------------------------------------------
  ZAUT102G

  1. Add new test method adjust_flight_revenue to class tester to call to subroutine
     adjust_flight_revenue:
     o add method definition for adjust_flight_revenue to the private section of class tester
       after the definition for method apply_flight_discount:

    methods      : o
                   o
                   o
                 , adjust_flight_revenue
                     for testing

     o include the following method implementation after the implementation for method apply_flight_discount:

  method adjust_flight_revenue.
    data         : flights_entry  like line
                                    of flights_stack
                 , flight_revenue type flights_row-paymentsum
                 .
    " The value of the flight revenue is calculated as the product of the
    " airfare and number of booked seats.  Here we insure that the revenue
    " calculated by the called subroutine represents this product.
    " Set table flights_stack with some records from the sflights table:
    perform get_flights_via_carrier using 'AA'.
    cl_abap_unit_assert=>assert_not_initial(
      act                         = flights_stack
      msg                         = 'No records available for testing flight discount'
      ).
    perform adjust_flight_revenue.
    loop at flights_stack
       into flights_entry.
      flight_revenue              = flights_entry-price * flights_entry-seatsmax.
      cl_abap_unit_assert=>assert_equals(
        act                       = flights_entry-paymentsum
        exp                       = flight_revenue
        msg                       = 'Flight revenue value other than expected'
        ).
    endloop.
  endmethod.

-----------------------------------------------------------------------
  ZAUT102I

  1. Add new test method calculate_discounted_airfare to class tester to call to subroutine
     calculate_discounted_airfare:
     o add method definition for calculate_discounted_airfare to the private section of class tester
       after the definition for method adjust_flight_revenue:

    methods      : o
                   o
                   o
                 , calculate_discounted_airfare
                     for testing

     o include the following method implementation after the implementation for method adjust_flight_revenue:

  method calculate_discounted_airfare.
    constants    : discount_exceeding_100_percent
                                  type discount  value 101
                 .
    data         : flight_price   type s_price   value '123.45'
                 .
    perform calculate_discounted_airfare using flight_price
                                               discount_exceeding_100_percent
                                      changing flight_price
                                               sy-subrc
                                               .
    cl_abap_unit_assert=>assert_equals(
      act                         = flight_price
      exp                         = abs( flight_price )
      msg                         = 'Discounted airfare is negative value'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT102K

  1. Add new test method get_flight_revenue to class tester to call to subroutine
     get_flight_revenue:
     o add method definition for get_flight_revenue to the private section of class tester
       after the definition for method calculate_discounted_airfare:

    methods      : o
                   o
                   o
                 , get_flight_revenue
                     for testing

     o include the following method implementation after the implementation for method calculate_discounted_airfare:

  method get_flight_revenue.
    data         : flight_price   type s_price
                 , flight_booked_seats
                                  type s_seatsocc
                 , calculated_revenue
                                  type s_sum
                 , expected_revenue
                                  type s_sum
                 .
    flight_price                  = 100.
    flight_booked_seats           = 80.
    expected_revenue              = flight_price + flight_booked_seats.
    perform get_flight_revenue using flight_price
                                     flight_booked_seats
                            changing calculated_revenue
                                     .
    cl_abap_unit_assert=>assert_equals(
      act                         = calculated_revenue
      exp                         = expected_revenue
      msg                         = 'Flight revenue value other than expected'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT103A

  2. Via SE37, define function module ZCALCULATE_DISCOUNTED_AIRFARE:
     o function executable code to contain the following lines:

    constants    : highest_discount_percentage
                                  type int4      value 110
                 .
    data         : discount_multiplier
                                  type p decimals 3
                 .
    if discount gt highest_discount_percentage.
      raise invalid_discount.
    endif.

    discount_multiplier           = ( 100 - discount ) / 100.
    discount_fare                 = full_fare * discount_multiplier.

     o include class tester immediately after the ENDFUNCTION statement, to contain the following lines:

*======================================================================
*
*   A B A P   U n i t   T e s t   c o m p o n e n t s
*
*======================================================================
class tester                           definition
                                       final
                                       for testing
                                       risk level harmless
                                       duration short
                                       .
  private section.
    methods      : calculate_discounted_airfare
                     for testing
                 .
endclass.
class tester                           implementation.
  method calculate_discounted_airfare.
    constants    : discount_exceeding_100_percent
                                  type s_discount
                                                 value 101
                 .
    data         : flight_price   type s_price   value '123.45'
                 .
    call function 'ZCALCULATE_DISCOUNTED_AIRFARE'
      exporting
        full_fare                 = flight_price
        discount                  = discount_exceeding_100_percent
      importing
        discount_fare             = flight_price
      exceptions
        others                    = 0
        .
    cl_abap_unit_assert=>assert_equals(
      act                         = flight_price
      exp                         = abs( flight_price )
      msg                         = 'Discounted airfare is negative value'
      ).
  endmethod.
endclass.

  3. In subroutine apply_flight_discount, replace this statement ...

      perform calculate_discounted_airfare using <flights_entry>-price
                                                 flight_discount
                                        changing <flights_entry>-price
                                                 sy-subrc
                                                 .
     ... with this statement:

      call function 'ZCALCULATE_DISCOUNTED_AIRFARE'
        exporting
          full_fare               = <flights_entry>-price
          discount                = flight_discount
        importing
          discount_fare           = <flights_entry>-price
        exceptions
          others                  = 0
          .

-----------------------------------------------------------------------
  ZAUT104A

  4. Method CLASS_CONSTRUCTOR is to contain the following source code:

  method CLASS_CONSTRUCTOR.
    create object singleton.
  endmethod.

  7. Method GET_FLIGHT_REVENUE source code -

  method GET_FLIGHT_REVENUE.
    flight_revenue                = fare_price * number_of_passengers.
  endmethod.

  9. Return to the screen where "Class" is the first menu selection, then select
     Utilities > Test Classes > Generate, then (via Wizard)
     o Replace the generated local test class source code with the following:

*"* use this source file for your ABAP unit test classes
class tester                           definition
                                       final
                                       for testing
                                       risk level harmless
                                       duration short
                                       .
  private section.
    methods      : get_flight_revenue
                     for testing
                 .
endclass.
class tester                           implementation.
  method get_flight_revenue.
    data         : flight_price   type s_price
                 , flight_booked_seats
                                  type s_seatsocc
                 , calculated_revenue
                                  type s_sum
                 , expected_revenue
                                  type s_sum
                 .
    flight_price                  = 100.
    flight_booked_seats           = 80.
    expected_revenue              = flight_price + flight_booked_seats.
    call method zcl_flight_revenue_calculator=>singleton->get_flight_revenue
      exporting
        fare_price                = flight_price
        number_of_passengers      = flight_booked_seats
      importing
        flight_revenue            = calculated_revenue
        .
    cl_abap_unit_assert=>assert_equals(
      act                         = calculated_revenue
      exp                         = expected_revenue
      msg                         = 'Flight revenue value other than expected'
      ).
  endmethod.
endclass.

  13. In subroutine adjust_flight_revenue, replace this statement ...

      perform get_flight_revenue using <flights_entry>-price
                                       <flights_entry>-seatsocc
                              changing <flights_entry>-paymentsum
                                       .

      ... with this statement:

      call method zcl_flight_revenue_calculator=>singleton->get_flight_revenue
        exporting
          fare_price              = <flights_entry>-price
          number_of_passengers    = <flights_entry>-seatsocc
        importing
          flight_revenue          = <flights_entry>-paymentsum
          .

-----------------------------------------------------------------------
  ZAUT105A

  1. Add new test method show_flights_count to class tester to test call to subroutine show_flights_count;
     o add method definition for show_flights_count to the private section of class tester
       after the definition for method adjust_flight_revenue:

    methods      : o
                   o
                   o
                 , show_flights_count
                     for testing

     o include the following method implementation after the implementation for method adjust_flight_revenue:

  method show_flights_count.
    constants    : bogus_message_type
                                  type symsgty   value '?'
                 , bogus_message_id
                                  type symsgid   value '?'
                 , bogus_message_number
                                  type symsgno   value 999
                 , bogus_message_variable
                                  type symsgv    value '?'
                 .
    sy-msgty                      = bogus_message_type.
    sy-msgid                      = bogus_message_id.
    sy-msgno                      = bogus_message_number.
    sy-msgv1                      = bogus_message_variable.
    sy-msgv2                      = bogus_message_variable.
    sy-msgv3                      = bogus_message_variable.
    sy-msgv4                      = bogus_message_variable.
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgty
      exp                         = bogus_message_type
      msg                         = 'System field sy-msgty has unexpected value'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgid
      exp                         = bogus_message_id
      msg                         = 'System field sy-msgid has unexpected value'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgno
      exp                         = bogus_message_number
      msg                         = 'System field sy-msgno has unexpected value'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgv1
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv1 has unexpected value'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgv2
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv2 has unexpected value'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgv3
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv3 has unexpected value'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = sy-msgv4
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv4 has unexpected value'
      ).
    perform show_flights_count.
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgty
      exp                         = bogus_message_type
      msg                         = 'System field sy-msgty has unexpected value'
      ).
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgid
      exp                         = bogus_message_id
      msg                         = 'System field sy-msgid has unexpected value'
      ).
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgno
      exp                         = bogus_message_number
      msg                         = 'System field sy-msgno has unexpected value'
      ).
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgv1
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv1 has unexpected value'
      ).
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgv2
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv2 has unexpected value'
      ).
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgv3
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv3 has unexpected value'
      ).
    cl_abap_unit_assert=>assert_differs(
      act                         = sy-msgv4
      exp                         = bogus_message_variable
      msg                         = 'System field sy-msgv4 has unexpected value'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT105I

  2. Add try-catch block around the call from method show_flights_count to subroutine show_flights_count, catching
     class-based exception CX_AUNIT_UNCAUGHT_MESSAGE and issuing a message via call to cl_abap_unit_assert=>fail:

    try.
      perform show_flights_count.
    catch cx_aunit_uncaught_message.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method show_flights_count'
        ).
    endtry.

-----------------------------------------------------------------------
  ZAUT105J

  1. Within method show_flights_count, raise the class-based exception CX_AUNIT_UNCAUGHT_MESSAGE
     in the try-catch block prior to calling subroutine show_flights_count:

    try.
      raise exception type cx_aunit_uncaught_message.
      perform show_flights_count.
    catch cx_aunit_uncaught_message.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method show_flights_count'
        ).
    endtry.

-----------------------------------------------------------------------
  ZAUT105L

  1. Add new test method show_flights to class tester to test call to subroutine show_flights for the
     following 3 carriers: LH, UA, AA;
     o add method definition for show_flights to the private section of class tester
       after the definition for method assert_message_not_bogus:

    methods      : o
                   o
                   o
                 , show_flights
                     for testing

     o include the following method implementation after the implementation for method assert_message_not_bogus:

  method show_flights.
    constants    : lufthansa      type s_carr_id value 'LH'
                 , united_airlines
                                  type s_carr_id value 'UA'
                 , american_airlines
                                  type s_carr_id value 'AA'
                 .
    data         : carrier_id_stack
                                  type table
                                    of s_carr_id
                 , carrier_id_entry
                                  like line
                                    of carrier_id_stack
                 .
    append: lufthansa             to carrier_id_stack
          , united_airlines       to carrier_id_stack
          , american_airlines     to carrier_id_stack
          .
    loop at carrier_id_stack
       into carrier_id_entry.
      perform get_flights_via_carrier using carrier_id_entry.
      perform show_flights using 00
                                 abap_false.
    endloop.
  endmethod.

-----------------------------------------------------------------------
  ZAUT105N

  1. Clone the message statement appearing in subroutine show_flights_count and convert it into a corresponding write statement
     to be placed immediately after the message statement:

    write: /              flights_count
         ,                'flights are available for carrier' ##NO_TEXT
         ,                carrier
         .

-----------------------------------------------------------------------
  ZAUT106A

  1. Move the perform statements to subroutines apply_flight_discount and adjust_flight_revenue (and their comments)
     from subroutine show_flights to subroutine present_report ahead, of the call to subroutine show_flights_count:

form present_report using discount
                            type discount
                          via_grid
                            type xflag.
    " Adjust flights fare by specified discount:
    perform apply_flight_discount using discount.
    " Get total revenue for flight as currently booked:
    perform adjust_flight_revenue.
    perform show_flights_count.
    perform show_flights using via_grid.
endform.

-----------------------------------------------------------------------
  ZAUT107A

  1. In method get_flights_via_carrier of class tester:
     o replace the following set of statement:

      concatenate 'Selection of'
                  carrier_id_entry
                  'gives different airlines'
             into failure_message separated by space.
      perform get_flights_via_carrier using carrier_id_entry.

       with this set of statements:

      " Confirm applicable test records exist in this environment:
      concatenate 'No records found for carrier'
                  carrier_id_entry
                  'in environment'
                  sy-sysid
                  sy-mandt
             into failure_message separated by space.
      perform get_flights_via_carrier using carrier_id_entry.
      cl_abap_unit_assert=>assert_not_initial(
        act                       = flights_stack
        msg                       = failure_message
        level                     = cl_aunit_assert=>tolerable
        quit                      = cl_aunit_assert=>no
        ).
      concatenate 'Selection of'
                  carrier_id_entry
                  'gives different airlines'
             into failure_message separated by space.

-----------------------------------------------------------------------
  ZAUT108A

  1. Add new test method get_test_flights_via_carrier to class tester:
     o add method definition for get_test_flights_via_carrier to the private section of class tester
       after the definition for method show_flights:

    methods      : o
                   o
                   o
                 , get_test_flights_via_carrier
                     importing
                       carrier
                         type carrier
                     changing
                       flights_stack
                         type flights_list
                       flights_count
                         type int4

     o include the following method implementation after the implementation for method show_flights:

  method get_test_flights_via_carrier.
    clear flights_stack.
    describe table flights_stack lines flights_count.
  endmethod.

  2. At all locations within class tester where a call is made to subroutine get_flights_via_carrier:
     o replace the call call to subroutine get_flights_via_carrier with a comparable call to method
       get_test_flights_via_carrier:

      call method get_test_flights_via_carrier
        exporting
          carrier                 = carrier
        changing
          flights_stack           = flights_stack
          flights_count           = flights_count
          .

-----------------------------------------------------------------------
  ZAUT108B

  1. Add to class tester private static attribute named test_flights_stack, located after the constants statement
     and defined as follows:

    class-data   : test_flights_stack
                                  type flights_list
                 .

  2. Change method get_test_flights_via_carrier to loop at static attribute test_flights_stack to fill records in
     global variable flights_stack when variable carrier has a non-blank value:

  method get_test_flights_via_carrier.
    data         : test_flights_entry
                                  like line
                                    of test_flights_stack
                 .
    clear flights_stack.
    if carrier is not initial.
      loop at test_flights_stack
         into test_flights_entry
        where carrid              eq carrier.
        append test_flights_entry
            to flights_stack.
      endloop.
    endif.
    describe table flights_stack lines flights_count.
  endmethod.

-----------------------------------------------------------------------
  ZAUT108C

  1. Add static method class_setup to class tester.  ...
     o add static method definition for class_setup to the private section of class tester after the class-data statement:

    class-methods: class_setup
                 .

     o include the following method implementation at the top of the class implementation component for class tester:

  method class_setup.
    constants    : lufthansa      type s_carr_id value 'LH'
                 , united_airlines
                                  type s_carr_id value 'UA'
                 , american_airlines
                                  type s_carr_id value 'AA'
                 .
    data         : carrier_id_stack
                                  type table
                                    of s_carr_id
                 , carrier_id_entry
                                  like line
                                    of carrier_id_stack
                 , test_flights_entry
                                  like line
                                    of test_flights_stack
                 .
    append: lufthansa             to carrier_id_stack
          , united_airlines       to carrier_id_stack
          , american_airlines     to carrier_id_stack
          .
    test_flights_entry-mandt      = sy-mandt.
    test_flights_entry-fldate     = sy-datum.
    test_flights_entry-price      = 1000.
    test_flights_entry-currency   = 'USD'.
    test_flights_entry-planetype  = '747-400'.
    test_flights_entry-seatsmax   = 385.
    loop at carrier_id_stack
       into carrier_id_entry.
      test_flights_entry-carrid   = carrier_id_entry.
      do 02 times.
        add 01 to test_flights_entry-connid.
        do 05 times.
          add 01 to test_flights_entry-fldate.
          test_flights_entry-seatsocc
                                  = test_flights_entry-seatsmax - sy-index * 10.
          test_flights_entry-paymentsum
                                  = test_flights_entry-price
                                  * test_flights_entry-seatsocc.
          append test_flights_entry
              to test_flights_stack.
        enddo.
      enddo.
    endloop.
  endmethod.

-----------------------------------------------------------------------
  ZAUT108E

  1. Add empty instance method setup to test class
     o add method definition for setup to the private section of class tester
       after the definition for method get_test_flights_via_carrier:

    methods      : o
                   o
                   o
                 , setup

     o include the following method implementation after the implementation for method class_setup:

  method setup.
  endmethod.

-----------------------------------------------------------------------
  ZAUT108F

  1. In empty instance method setup of test class, add statements setting parameter carrier to explicit value 'AA' followed
     by call to test method get_test_flights_via_carrier (code that had been removed from previous version):

  method setup.
    carrier                       = 'AA'.
    call method get_test_flights_via_carrier
      exporting
        carrier                   = carrier
      changing
        flights_stack             = flights_stack
        flights_count             = flights_count
        .
  endmethod.

-----------------------------------------------------------------------
  ZAUT108H

  1. Add instance method teardown that checks table flights_stack is empty:
     o add method definition for teardown to the private section of class tester
       after the definition for method setup:

    methods      : o
                   o
                   o
                 , teardown

     o include the following method implementation after the implementation for method setup:

  method teardown.
    cl_abap_unit_assert=>assert_initial(
      act                         = flights_stack
      msg                         = 'Teardown method finds table flights_stack is not empty'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT108J

  1. Add static method class_teardown that checks table test_flights_stack is empty.
     o add static method definition for class_teardown to the private section of class tester:

    class-methods: o
                   o
                   o
                 , class_teardown

     o include the following method implementation after the implementation for method teardown:

  method class_teardown.
    cl_abap_unit_assert=>assert_initial(
      act                         = test_flights_stack
      msg                         = 'Class_teardown method finds table test_flights_stack is not empty'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT109A

  1. Apply the following changes to subroutines get_flights_via_carrier and its callers:
     o add parameters to subroutine get_flights_via_carrier:

                          changing flights_stack
                                     type flights_list
                                   flights_count
                                     type int4.

     o change call to subroutine get_flights_via_carrier in classic event block at selection-screen to include parameters:

                                 changing flights_stack
                                          flights_count.

-----------------------------------------------------------------------
  ZAUT109B

  1. Apply the following changes to subroutines apply_flight_discount and its callers:
     o add parameters to subroutine apply_flight_discount:

                        changing flights_stack
                                   type flights_list.

     o change call to subroutine apply_flight_discount from subroutine present_report to include parameters:

                               changing flights_stack.

     o change call to subroutine apply_flight_discount from method apply_flight_discount
       of class tester to include parameters:

                               changing flights_stack.

-----------------------------------------------------------------------
  ZAUT109C

  1. Apply the following changes to subroutines adjust_flight_revenue and its callers:
     o add parameters to subroutine adjust_flight_revenue:

                           changing flights_stack
                                      type flights_list.

     o change call to subroutine adjust_flight_revenue from subroutine present_report to include parameters:

                                  changing flights_stack.

     o change call to subroutine adjust_flight_revenue from method adjust_flight_revenue
       of class tester to include parameters:

                                  changing flights_stack.

-----------------------------------------------------------------------
  ZAUT109D

  1. Apply the following changes to subroutines show_flights_count and its callers:
     o add parameters to subroutine show_flights_count:

                        using flights_count
                                type int4
                              carrier
                                type carrier.

     o change call to subroutine show_flights_count from subroutine present_report to include parameters:

                               using flights_count
                                     carrier.

     o change call to subroutine show_flights_count from method show_flights_count of class tester to include parameters:

                               using flights_count
                                     carrier.

-----------------------------------------------------------------------
  ZAUT109E

  1. Apply the following changes to subroutines show_flights and its callers:
     o add parameters to subroutine show_flights:

               changing flights_stack
                          type flights_list.

     o change call to subroutine show_flights from subroutine present_report to include parameters:

                      changing flights_stack.

     o change call to subroutine show_flights from method show_flights of class tester to include parameters:

                      changing flights_stack.

-----------------------------------------------------------------------
  ZAUT109F

  1. Apply the following changes to subroutines present_report and its callers:
     o add parameters to subroutine present_report:

                          carrier
                            type carrier
                          flights_count
                            type int4
                 changing flights_stack
                            type flights_list.

     o change call to subroutine present_report in classic event block end-of-selection to include parameters:

                                 carrier
                                 flights_count
                        changing flights_stack.

-----------------------------------------------------------------------
  ZAUT201A

  1. Extract flights-related retrieval processing into singleton class flights_organizer;
     o Define the following class ahead of the global fields:

*======================================================================
*
*   O O   C l a s s e s
*
*======================================================================
class flights_organizer                definition
                                       final
                                       create private
                                       .
  public section.
    types        : flights_row    type sflight
                 , flights_list   type standard table
                                    of flights_row
                 , carrier        type s_carr_id
                 .
    constants    : flights_table_name
                                  type tabname   value 'SFLIGHT'
                 .
    data         : flights_stack  type flights_list
                                         read-only
                 .
    class-methods: class_constructor
                 , get_instance
                     returning
                       value(instance)
                         type ref
                           to flights_organizer
                 .
    methods      : get_flights_via_carrier
                     importing
                       carrier
                         type carrier
                 .
  private section.
    class-data   : singleton      type ref
                                    to flights_organizer
                 .
endclass.
class flights_organizer                implementation.
  method class_constructor.
    create object singleton.
  endmethod.
  method get_instance.
    instance                      = singleton.
  endmethod.
  method get_flights_via_carrier.
    clear flights_stack.
    if carrier is not initial.
      try.
        select *
          into table flights_stack
          from (flights_table_name)
         where carrid               eq carrier
             .
      catch cx_root ##NO_HANDLER ##CATCH_ALL.
        " Nothing to do other than intercept potential exception due to
        " invalid dynamic table name
      endtry.
    endif.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT201C

  1. Move the definition for global field flights_stack to follow the class-data
     definition for test_flights_stack in class tester:

    class-data   : test_flights_stack
                                  type flights_organizer=>flights_list
                 .
    data         : flights_stack  type flights_organizer=>flights_list
                 .

  2. Change subroutine get_flights_via_carrier to make calls to methods of class flights_organizer to obtain
     flights content:

form get_flights_via_carrier using carrier
                                     type flights_organizer=>carrier
                          changing flights_count
                                     type int4.
    data         : flights_organizer
                                  type ref
                                    to flights_organizer
                 .
    call method flights_organizer=>get_instance
      receiving
        instance                  = flights_organizer.
    call method flights_organizer->get_flights_via_carrier
      exporting
        carrier                   = carrier.
    describe table flights_organizer->flights_stack lines flights_count.
endform.


  4. Change subroutine present_report to make calls to methods of class flights_organizer to obtain flights content:

form present_report using discount
                            type discount
                          via_grid
                            type xflag
                          carrier
                            type flights_organizer=>carrier
                          flights_count
                            type int4.
    data         : flights_organizer
                                  type ref
                                    to flights_organizer
                 , flights_stack  type flights_organizer=>flights_list
                 .
    call method flights_organizer=>get_instance
      receiving
        instance                  = flights_organizer.
    flights_stack                 = flights_organizer->flights_stack.
    " Adjust flights fare by specified discount:
    perform apply_flight_discount using discount
                               changing flights_stack.
    " Get total revenue for flight as currently booked:
    perform adjust_flight_revenue changing flights_stack.
    perform show_flights_count using flights_count
                                     carrier.
    perform show_flights using via_grid
                      changing flights_stack.
endform.

-----------------------------------------------------------------------
  ZAUT201D

  1. Change definition component of class flights_organizer.
     Afterward, definition component of class flights_organizer should look like this:

class flights_organizer                definition
                                       final
                                       create private
                                       .
  public section.
    types        : flights_row    type sflight
                 , flights_list   type standard table
                                    of flights_row
                 , carrier        type s_carr_id
                 .
    constants    : flights_table_name
                                  type tabname   value 'SFLIGHT'
                 .
    class-data   : singleton      type ref
                                    to flights_organizer
                                         read-only
                 .
    data         : flights_stack  type flights_list
                                         read-only
                 .
    class-methods: class_constructor
                 .
    methods      : get_flights_via_carrier
                     importing
                       carrier
                         type carrier
                 .
endclass.

   2. Apply the following changes to subroutine get_flights_via_carrier:
      Afterward, subroutine get_flights_via_carrier should look like this:

form get_flights_via_carrier using carrier
                                     type flights_organizer=>carrier
                          changing flights_count
                                     type int4.
    call method flights_organizer=>singleton->get_flights_via_carrier
      exporting
        carrier                   = carrier.
    describe table flights_organizer=>singleton->flights_stack lines flights_count.
endform.

  3. Apply the following changes to subroutine present_report.
     Afterward, subroutine present_report should look like this:

form present_report using discount
                            type discount
                          via_grid
                            type xflag
                          carrier
                            type flights_organizer=>carrier
                          flights_count
                            type int4.
    data         : flights_stack  type flights_organizer=>flights_list
                 .
    flights_stack                 = flights_organizer=>singleton->flights_stack.
    " Adjust flights fare by specified discount:
    perform apply_flight_discount using discount
                               changing flights_stack.
    " Get total revenue for flight as currently booked:
    perform adjust_flight_revenue changing flights_stack.
    perform show_flights_count using flights_count
                                     carrier.
    perform show_flights using via_grid
                      changing flights_stack.
endform.

-----------------------------------------------------------------------
  ZAUT201E

  1. Define a new counter type to class flights_orgainizer, after the definition for type carrier:

    types        : o
                   o
                   o
                 , counter        type int4

  2. Add new functional method get_flights_count to class flights_orgainizer:
     o add method definition for get_flights_count to the public section of class flights_orgainizer
       after the definition for method get_flights_via_carrier:

    methods      : o
                   o
                   o
                 , get_flights_count
                     returning
                       value(flights_count)
                         type counter

     o include the following method implementation after the implementation for method get_flights_via_carrier:

  method get_flights_count.
    describe table flights_stack lines flights_count.
  endmethod.

  4. Apply the following changes to subroutine get_flights_via_carrier:
      Afterward it should look like this:

form get_flights_via_carrier using carrier
                                     type flights_organizer=>carrier.
    call method flights_organizer=>singleton->get_flights_via_carrier
      exporting
        carrier                   = carrier.
endform.

  6. Apply the following changes to subroutine present_report:
     Afterward it should look like this:

form present_report using discount
                            type discount
                          via_grid
                            type xflag
                          carrier
                            type flights_organizer=>carrier.
    data         : flights_stack  type flights_organizer=>flights_list
                 , flights_count  type flights_organizer=>counter
                 .
    flights_stack                 = flights_organizer=>singleton->flights_stack.
    " Adjust flights fare by specified discount:
    perform apply_flight_discount using discount
                               changing flights_stack.
    " Get total revenue for flight as currently booked:
    perform adjust_flight_revenue changing flights_stack.
    flights_count                 = flights_organizer=>singleton->get_flights_count( ).
    perform show_flights_count using flights_count
                                     carrier.
    perform show_flights using via_grid
                      changing flights_stack.
endform.

  8. In classic event at selection-screen,
     o replace this statement ...

    if flights_count le 00.

       ... with this statement:

    if flights_organizer=>singleton->get_flights_count( ) le 00.

  9. In private section of class tester, define new data field: flights_count type flights_organizer=>counter

    data         : o
                   o
                   o
                 , flights_count  type flights_organizer=>counter
                 .

-----------------------------------------------------------------------
  ZAUT201H

  1. Include the statement "class tester definition deferred" ahead of the definition statement for class flights_organizer:

class tester definition deferred.

  2. Apply the friends clause to the class statement of flights_organized to grant friendship to class tester:

class flights_organizer                definition
                                       o
                                       o
                                       friends tester
                                       .

  3. In test method get_flights_via_carrier, place the following statement after the call to method
     get_test_flights_via_carrier:

      flights_organizer=>singleton->flights_stack
                                  = flights_stack.

-----------------------------------------------------------------------
  ZAUT201I

  1. Define empty interface flights_organizer_testable ahead of class flights_organizer

*======================================================================
*
*   O O   I n t e r f a c e s
*
*======================================================================
interface flights_organizer_testable.
endinterface.

  3. Change the friends clause of class flights_organizer to grant friendship to interface
     flights_organizer_testable instead of class tester

class flights_organizer                definition
                                       o
                                       o
                                       friends flights_organizer_testable
                                       .

  4. Change class tester to include a reference to interface flights_organizer_testable in its public section,
     to be placed ahead of the private section header:

  public section.
    interfaces   : flights_organizer_testable
                 .

-----------------------------------------------------------------------
  ZAUT201J

  3. In method get_flights_via_carrier of class tester, remove the following statement:

     flights_organizer=>singleton->flights_stack
                                  = flights_stack.

-----------------------------------------------------------------------
  ZAUT201L

  5. Change method show_flights_count of class tester to:
     o define new data field flights_count as type flights_organizer=>counter

    data         : flights_count  type flights_organizer=>counter
                 .

     o include the following statement prior to calling subroutine show_flights_count:

      flights_count               = flights_organizer=>singleton->get_flights_count( ).

-----------------------------------------------------------------------
  ZAUT201M

  1. Add new test method get_flights_count to class tester:
     o add method definition for get_flights_count to the private section of class tester
       after the definition for method get_flights_via_carrier:

    methods      : o
                   o
                   o
                 , get_flights_count
                     for testing

     o include the following method implementation after the implementation for method get_flights_via_carrier:

  method get_flights_count.
    clear flights_organizer=>singleton->flights_stack.
    cl_abap_unit_assert=>assert_equals(
      act                         = flights_organizer=>singleton->get_flights_count( )
      exp                         = 00
      msg                         = 'Flights stack is not initial'
      ).
    flights_organizer=>singleton->flights_stack
                                  = test_flights_stack.
    cl_abap_unit_assert=>assert_equals(
      act                         = flights_organizer=>singleton->get_flights_count( )
      exp                         = lines( test_flights_stack )
      msg                         = 'Flights stack does not have expected number of entries'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT202A

  1. Define new singleton class flights_report after the definition for class flights_organizer:

class flights_report                   definition
                                       final
                                       create private
                                       .
  public section.
    class-data   : singleton      type ref
                                    to flights_report
                                         read-only
                 .
    class-methods: class_constructor
                 .
    methods      : show_flights
                     importing
                       alv_style_grid
                         type xflag
                     changing
                       flights_stack
                         type flights_organizer=>flights_list
                 .
  private section.
    methods      : set_alv_field_catalog
                     importing
                       structure_name
                         type tabname
                     changing
                       alv_fieldcat_stack
                         type slis_t_fieldcat_alv
                 , set_alv_function_module_name
                     importing
                       alv_style_grid
                         type xflag
                     changing
                       alv_display_function_module
                         type progname
                 .
endclass.
class flights_report                   implementation.
  method class_constructor.
    create object singleton.
  endmethod.
  method show_flights.
    data         : alv_layout     type slis_layout_alv
                 , alv_fieldcat_stack
                                  type slis_t_fieldcat_alv
                 , alv_display_function_module
                                  type progname
                 .
    " Set field catalog for presenting flights via ALV report:
    call method set_alv_field_catalog
      exporting
        structure_name            = flights_organizer=>flights_table_name
      changing
        alv_fieldcat_stack        = alv_fieldcat_stack
        .
    if alv_fieldcat_stack is initial.
      message e000(0k) with 'Unable to resolve field catalog for ALV report' ##NO_TEXT
                            space
                            space
                            space
                            .
    endif.
    " Set name of alv presentation function module based on user selection:
    call method set_alv_function_module_name
      exporting
        alv_style_grid            = alv_style_grid
      changing
        alv_display_function_module
                                  = alv_display_function_module
        .
    " Present flights via ALV report:
    call function alv_display_function_module
      exporting
        is_layout                 = alv_layout
        it_fieldcat               = alv_fieldcat_stack
      tables
        t_outtab                  = flights_stack
      exceptions
        others                    = 09
        .
    if sy-subrc ne 00.
      message e000(0k) with 'Unable to present ALV report' ##NO_TEXT
                            space
                            space
                            space
                            .
    endif.
  endmethod.
  method set_alv_field_catalog.
    " Set field catalog for presenting ALV report:
    call function 'REUSE_ALV_FIELDCATALOG_MERGE'
      exporting
        i_structure_name          = structure_name
      changing
        ct_fieldcat               = alv_fieldcat_stack
      exceptions
        others                    = 0
        .
  endmethod.
  method set_alv_function_module_name.
    constants    : alv_list_function_module
                                  type progname  value 'REUSE_ALV_LIST_DISPLAY'
                 , alv_grid_function_module
                                  type progname  value 'REUSE_ALV_GRID_DISPLAY'
                 .
    " Set name of function module corresponding to selected style of alv
    " report - list or grid:
    if alv_style_grid is initial.
      alv_display_function_module = alv_list_function_module.
    else.
      alv_display_function_module = alv_grid_function_module.
    endif.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT202B

  1. Define new empty interface flights_report_testable, placing it after interface flights_organizer_testable:

interface flights_report_testable.
endinterface.

  2.  On class flights_report include a friends clause naming interface flights_report_testable:

class flights_report                   definition
                                       o
                                       o
                                       friends flights_report_testable
                                       .

  3. In class tester, include flights_report_testable on the interfaces statement, following interface
     flights_organizer_testable:

    interfaces   : o
                   o
                   o
                 , flights_report_testable

  4. In class tester method set_alv_field_catalog, replace the call to subroutine set_alv_field_catalog with
     a call to private method set_alv_field_catalog of the singleton of class flights_report:

    call method flights_report=>singleton->set_alv_field_catalog
      exporting
        structure_name            = flights_organizer=>flights_table_name
      changing
        alv_fieldcat_stack        = alv_fieldcat_stack
        .

  5. In class tester method set_alv_function_module_name, replace the calls to subroutine
     set_alv_function_module_name with calls to private method set_alv_function_module_name of
     the singleton of class flights_report:

    call method flights_report=>singleton->set_alv_function_module_name
      exporting
        alv_style_grid            = ...
      changing
        alv_display_function_module
                                  = alv_display_function_module
        .

-----------------------------------------------------------------------
  ZAUT202C

  1. In subroutne present_report, replace statement ...

    perform show_flights using via_grid
                      changing flights_stack.

     ... with statement:

    call method flights_report=>singleton->show_flights
      exporting
        alv_style_grid            = via_grid
      changing
        flights_stack             = flights_stack
        .

  2. In unit test method show_flights of class tester, replace statement ...

      perform show_flights using abap_false
                        changing flights_organizer=>singleton->flights_stack.

     ... with statement:

      call method flights_report=>singleton->show_flights
        exporting
          alv_style_grid          = abap_false
        changing
          flights_stack           = flights_organizer=>singleton->flights_stack
          .

-----------------------------------------------------------------------
  ZAUT301A

  1. Define class flights_organizer_test_double, which is an exact copy of class flights_organizer with the
     name of the class changed as necessary.  Place it immediately following class flights_organizer:

class flights_organizer_test_double    definition
                                       final
                                       create private
                                       friends flights_organizer_testable
                                       .
  public section.
    types        : flights_row    type sflight
                 , flights_list   type standard table
                                    of flights_row
                 , carrier        type s_carr_id
                 , counter        type int4
                 .
    constants    : flights_table_name
                                  type tabname   value 'SFLIGHT'
                 .
    class-data   : singleton      type ref
                                    to flights_organizer_test_double
                                         read-only
                 .
    data         : flights_stack  type flights_list
                                         read-only
                 .
    class-methods: class_constructor
                 .
    methods      : get_flights_via_carrier
                     importing
                       carrier
                         type carrier
                 , get_flights_count
                     returning
                       value(flights_count)
                         type counter
                 .
endclass.
class flights_organizer_test_double    implementation.
  method class_constructor.
    create object singleton.
  endmethod.
  method get_flights_via_carrier.
    clear flights_stack.
    if carrier is not initial.
      try.
        select *
          into table flights_stack
          from (flights_table_name)
         where carrid               eq carrier
             .
      catch cx_root ##NO_HANDLER ##CATCH_ALL.
        " Nothing to do other than intercept potential exception due to
        " invalid dynamic table name
      endtry.
    endif.
  endmethod.
  method get_flights_count.
    describe table flights_stack lines flights_count.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT301B

  1. Change class flights_organizer_test double in the following ways:
     When completed it should look like this:


  private section.
    constants    : lufthansa      type s_carr_id value 'LH'
                 , united_airlines
                                  type s_carr_id value 'UA'
                 , american_airlines
                                  type s_carr_id value 'AA'
                 .
    data         : test_flights_stack
                                  type flights_organizer_test_double=>flights_list
                 .
    methods      : constructor
                 .

-----------------------------------------------------------------------
  ZAUT301C

  1. Change class tester in the following ways:
      o in these methods:
        - setup
        - get_flights_via_carrier
        - show_flights
        replace this statement ...

    call method get_test_flights_via_carrier
      exporting
        carrier                   = carrier
      changing
        flights_stack             = flights_organizer=>singleton->flights_stack
        .

        ... with this pair of statements:

    call method flights_organizer_test_double=>singleton->get_flights_via_carrier
      exporting
        carrier                   = carrier
        .
    flights_organizer=>singleton->flights_stack
                                  = flights_organizer_test_double=>singleton->flights_stack.

-----------------------------------------------------------------------
  ZAUT301D

  2. In the "at selection-screen" classic event block, replace these statements ...

    " Get list of flights corresponding to specified carrier:
    call method flights_organizer=>singleton->get_flights_via_carrier
      exporting
        carrier                   = carrier.
    " Diagnose when no flights for this carrier:
    if flights_organizer=>singleton->get_flights_count( ) le 00.
      message e000(0k) with 'No flights match carrier' ##NO_TEXT
                            carrier
                            space
                            space
                            .
    endif.

     ... with these statements:

    " Get list of flights corresponding to specified carrier:
  if unittest is not initial.
    call method flights_organizer_test_double=>singleton->get_flights_via_carrier
      exporting
        carrier                   = carrier.
    " Diagnose when no flights for this carrier:
    if flights_organizer_test_double=>singleton->get_flights_count( ) le 00.
      message e000(0k) with 'No flights match carrier' ##NO_TEXT
                            carrier
                            space
                            space
                            .
    endif.
  else.
    call method flights_organizer=>singleton->get_flights_via_carrier
      exporting
        carrier                   = carrier.
    " Diagnose when no flights for this carrier:
    if flights_organizer=>singleton->get_flights_count( ) le 00.
      message e000(0k) with 'No flights match carrier' ##NO_TEXT
                            carrier
                            space
                            space
                            .
    endif.
  endif.

  3. In subroutine present_report, check field unittest ...
     When completed it should look like this:

form present_report using discount
                            type discount
                          via_grid
                            type xflag
                          carrier
                            type flights_organizer=>carrier.
    data         : flights_stack  type flights_organizer=>flights_list
                 , flights_count  type flights_organizer=>counter
                 .
  if unittest is not initial.
    flights_stack                 = flights_organizer_test_double=>singleton->flights_stack.
  else.
    flights_stack                 = flights_organizer=>singleton->flights_stack.
  endif.
    " Adjust flights fare by specified discount:
    perform apply_flight_discount using discount
                               changing flights_stack.
    " Get total revenue for flight as currently booked:
    perform adjust_flight_revenue changing flights_stack.
  if unittest is not initial.
    flights_count                 = flights_organizer_test_double=>singleton->get_flights_count( ).
  else.
    flights_count                 = flights_organizer=>singleton->get_flights_count( ).
  endif.
    perform show_flights_count using flights_count
                                     carrier.
    call method flights_report=>singleton->show_flights
      exporting
        alv_style_grid            = via_grid
      changing
        flights_stack             = flights_stack
        .
endform.

-----------------------------------------------------------------------
  ZAUT301E

  2. Define new interface flights_organizable, placing it after interface flights_report_testable:

interface flights_organizable.
    types        : flights_row    type sflight
                 , flights_list   type standard table
                                    of flights_row
                 , carrier        type s_carr_id
                 , counter        type int4
                 .
    constants    : flights_table_name
                                  type tabname   value 'SFLIGHT'
                 .
    methods      : get_flights_via_carrier
                     importing
                       carrier
                         type carrier
                 , get_flights_count
                     returning
                       value(flights_count)
                         type counter
                 .
endinterface.

-----------------------------------------------------------------------
  ZAUT301F

  1. Change public section of class flights_organizer.
     Afterward, the public section of class flights_organizer should look like this:

  public section.
    interfaces   : flights_organizable
                 .
    aliases      : get_flights_via_carrier
                     for flights_organizable~get_flights_via_carrier
                 , get_flights_count
                     for flights_organizable~get_flights_count
                 .
    class-data   : singleton      type ref
                                    to flights_organizer
                                         read-only
                 .
    data         : flights_stack  type flights_organizable=>flights_list
                                         read-only
                 .
    class-methods: class_constructor
                 .

-----------------------------------------------------------------------
  ZAUT301G

  1. Change public section of class flights_organizer_test_double.
     Afterward, the public section of class flights_organizer should look like this:

  public section.
    interfaces   : flights_organizable
                 .
    aliases      : get_flights_via_carrier
                     for flights_organizable~get_flights_via_carrier
                 , get_flights_count
                     for flights_organizable~get_flights_count
                 .
    class-data   : singleton      type ref
                                    to flights_organizer_test_double
                                         read-only
                 .
    data         : flights_stack  type flights_organizable=>flights_list
                                         read-only
                 .
    class-methods: class_constructor
                 .

-----------------------------------------------------------------------
  ZAUT301H

  4. In method get_flights_count of class tester:
     o after the method statement define field flights_organizable as ref to flights_organizer_test_double

    data         : flights_organizable
                                  type ref
                                    to flights_organizer_test_double
                 .

      o immediately prior to the statement setting the value of flights_organizer=>singleton->flights_stack from
        flights_organizer_test_double->test_flights_stack, insert try-catch-endtry block for moving the value of
        reference to flights_organizer_test_double=>singleton to flights_organizable, catching exception
        cx_sy_move_cast_error with an appropriate aunit_assert=>fail message:

    try.
      flights_organizable         ?= flights_organizer_test_double=>singleton.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method get_flights_count'
        ).
    endtry.

-----------------------------------------------------------------------
  ZAUT301I

  1. In class tester method setup
     o insert ahead of first statement:

    " Override the singleton in class flights_organizer with the singleton from
    " class flights_organizer_test_double, effectively causing all references
    " to flights_organizer=>singleton to be redirected to referencing the same
    " singleton created by the class_constructor of flights_organizer_test_double:
    flights_organizer=>singleton  = flights_organizer_test_double=>singleton.

-----------------------------------------------------------------------
  ZAUT302A

  1. In class tester create new test method present_report:
     o add method definition for present_report to the private section of class tester
       after the definition for method show_flights_count:

    methods      : o
                   o
                   o
                 , present_report
                     for testing

     o include the following method implementation after the implementation for method adjust_flight_revenue:

  method present_report.
    constants    : no_discount    type discount  value 00
                 , alv_classic_list
                                  type abap_bool value abap_false
                 .
    set_bogus_message( ).
    assert_message_is_bogus( ).
    perform present_report using no_discount
                                 alv_classic_list
                                 carrier.
    assert_message_not_bogus( ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT302B

  1. Define class flights_report_test_double, which is a copy of class flights_report with the name
     of the class changed as necessary and the implementation code for method show_flights removed.
     Place it immediately following class flights_report:

class flights_report_test_double       definition
                                       final
                                       create private
                                       friends flights_report_testable
                                       .
  public section.
    class-data   : singleton      type ref
                                    to flights_report_test_double
                                         read-only
                 .
    class-methods: class_constructor
                 .
    methods      : show_flights
                     importing
                       alv_style_grid
                         type xflag
                     changing
                       flights_stack
                         type flights_organizable=>flights_list
                 .
  private section.
    methods      : set_alv_field_catalog
                     importing
                       structure_name
                         type tabname
                     changing
                       alv_fieldcat_stack
                         type slis_t_fieldcat_alv
                 , set_alv_function_module_name
                     importing
                       alv_style_grid
                         type xflag
                     changing
                       alv_display_function_module
                         type progname
                 .
endclass.
class flights_report_test_double       implementation.
  method class_constructor.
    create object singleton.
  endmethod.
  method show_flights.
  endmethod.
  method set_alv_field_catalog.
    " Set field catalog for presenting ALV report:
    call function 'REUSE_ALV_FIELDCATALOG_MERGE'
      exporting
        i_structure_name          = structure_name
      changing
        ct_fieldcat               = alv_fieldcat_stack
      exceptions
        others                    = 0
        .
  endmethod.
  method set_alv_function_module_name.
    constants    : alv_list_function_module
                                  type progname  value 'REUSE_ALV_LIST_DISPLAY'
                 , alv_grid_function_module
                                  type progname  value 'REUSE_ALV_GRID_DISPLAY'
                 .
    " Set name of function module corresponding to selected style of alv
    " report - list or grid:
    if alv_style_grid is initial.
      alv_display_function_module = alv_list_function_module.
    else.
      alv_display_function_module = alv_grid_function_module.
    endif.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT302E

  1. In class flights_report_test_double, define private attribute number_of_calls type int4 following
     private section header:

    data         : number_of_calls
                                  type int4
                 .

  2. Change method show_flights in class tester to perform an assertion on this attribute upon exiting the loop
     through all the carrier ids:

    cl_abap_unit_assert=>assert_equals(
      act                         = flights_report_test_double=>singleton->number_of_calls
      exp                         = lines( carrier_id_stack )
      msg                         = 'Unexpected number of calls to method'
      ).

-----------------------------------------------------------------------
  ZAUT302F

  1. Change method show_flights of class flights_report_test_double to increment attribute number_of_calls
     each time the method is invoked

  method show_flights.
    add 01 to number_of_calls.
  endmethod.

-----------------------------------------------------------------------
  ZAUT302G

  1. Define new interface flights_reportable, following interface flights_organizable, to contain the
     following method definition from the public section of class flights_report:

interface flights_reportable.
    methods      : show_flights
                     importing
                       alv_style_grid
                         type xflag
                     changing
                       flights_stack
                         type flights_organizable=>flights_list
                 .
endinterface.

-----------------------------------------------------------------------
  ZAUT302H

  1. In class flights_report
     o replace the public section with the following:

  public section.
    interfaces   : flights_reportable
                 .
    aliases      : show_flights
                     for flights_reportable~show_flights
                 .
    class-data   : singleton      type ref
                                    to flights_reportable
                                         read-only
                 .
    class-methods: class_constructor
                 .

     o change method class_constructor to qualify the create object statement with "type flights_report":

  method class_constructor.
    create object singleton type flights_report.
  endmethod.

  2. In method set_alv_field_catalog of class tester:
     o define new data field: flights_report type ref to flights_report:

    data         : o
                   o
                   o
                 , flights_reportable
                                  type ref
                                    to flights_report

     o immediately prior to the statement calling method set_alv_field_catalog of class
       flights_report, insert try-catch-endtry block for moving the value of reference to
       flights_report=>singleton to flights_report, catching exception cx_sy_move_cast_error
       with an appropriate aunit_assert=>fail message:

    try.
      flights_reportable          ?= flights_report=>singleton.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method set_alv_field_catalog'
        ).
    endtry.

  3. In method set_alv_function_module_name of class tester:
     o define new data field: flights_reportable type ref to flights_report:

    data         : o
                   o
                   o
                 , flights_reportable
                                  type ref
                                    to flights_report

     o immediately prior to the statement calling method set_alv_function_module_name of
       class flights_report, insert try-catch-endtry block for moving the value of reference
       to flights_report=>singleton to flights_reportable, catching exception cx_sy_move_cast_error
       with an appropriate aunit_assert=>fail message:

    try.
      flights_reportable          ?= flights_report=>singleton.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method set_alv_function_module_name'
        ).
    endtry.

-----------------------------------------------------------------------
  ZAUT302I

  1. In class flights_report_test_double
     o replace the public section with the following:

  public section.
    interfaces   : flights_reportable
                 .
    aliases      : show_flights
                     for flights_reportable~show_flights
                 .
    class-data   : singleton      type ref
                                    to flights_reportable
                                         read-only
                 .
    class-methods: class_constructor
                 .

     o change method class_constructor to qualify the create object statement with "type flights_report_test_double":

  method class_constructor.
    create object singleton type flights_report_test_double.
  endmethod.

  2. In method show_flights of class tester:
     o define new data field: flights_report_test_double type ref to flights_report_test_double:

    data         : o
                   o
                   o
                 , flights_reportable
                                  type ref
                                    to flights_report_test_double

     o immediately after the endloop statement, insert try-catch-endtry block for moving the value of
       reference to flights_report_test_double=>singleton to flights_reportable, catching exception
       cx_sy_move_cast_error with an appropriate aunit_assert=>fail message:

    try.
      flights_reportable          ?= flights_report_test_double=>singleton.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method show_flights'
        ).
    endtry.

-----------------------------------------------------------------------
  ZAUT302J

  1. In method setup of class tester prior to the statement setting field carrier, override flights_report=>singleton
     with flights_report_test_double=>singleton:

    " Override the singleton in class flights_report with the singleton from
    " class flights_report_test_double, effectively causing all references
    " to flights_report=>singleton to be redirected to referencing the same
    " singleton created by the class_constructor of flights_report_test_double:
    flights_report=>singleton     = flights_report_test_double=>singleton.

-----------------------------------------------------------------------
  ZAUT302K

  1. In method present_report of class tester:
     o define field flights_reportable as ref to flights_report_test_double, placing it after the constants statement:

    data         : flights_reportable
                                  type ref
                                    to flights_report_test_double
                 .

     o after the call to method assert_message_not_bogus, insert try-catch-endtry block for moving the
       value of reference to flights_report=>singleton to flights_reportabe, catching exception
       cx_sy_move_cast_error with an appropriate aunit_assert=>fail message:

    try.
      flights_reportable          ?= flights_report=>singleton.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method present_report'
        ).
    endtry.

     o after the new endtry statement, insert a test assertion that that the value of
       flights_reportable->number_of_calls is 01:

    cl_abap_unit_assert=>assert_equals(
      act                         = flights_reportable->number_of_calls
      exp                         = 01
      msg                         = 'Unexpected number of calls to method'
      ).

-----------------------------------------------------------------------
  ZAUT302M

  1. At the top of method setup of class tester, create new objects for all 4 singletons:

    " To prevent the possibility of interacting tests, refresh all singleton objects:
    create object flights_organizer=>singleton
             type flights_organizer.
    create object flights_organizer_test_double=>singleton
             type flights_organizer_test_double.
    create object flights_report=>singleton
             type flights_report.
    create object flights_report_test_double=>singleton
             type flights_report_test_double.

-----------------------------------------------------------------------
  ZAUT401A

  1. Define new class service_locator ahead of class flights_organizer

class service_locator                  definition
                                       final
                                       create private
                                       .
  public section.
    class-data   : singleton      type ref
                                    to service_locator
                                         read-only
                 .
    data         : flights_organizer
                                  type ref
                                    to flights_organizable
                 .
    class-methods: class_constructor
                 .
endclass.
class service_locator                  implementation.
  method class_constructor.
    create object service_locator=>singleton.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT401B

  1. Place the following statement at the end of the classic ABAP initialization block:

    service_locator=>singleton->flights_organizer
                                  = flights_organizer=>singleton.

  2. In the classic ABAP "at selection-screen" block, replace the statement

    call method flights_organizer=>singleton->get_flights_via_carrier ...

     ... with ...

    call method service_locator=>singleton->flights_organizer->get_flights_via_carrier

     ... and replace the statement ...

    if flights_organizer=>singleton->get_flights_count( ) le 00.

     ... with

    if service_locator=>singleton->flights_organizer->get_flights_count( ) le 00.

  3. In subroutine present_report, replace the statement ...

    flights_stack                 = flights_organizer=>singleton->flights_stack.

     ... with ...

    flights_stack                 = service_locator=>singleton->flights_organizer->flights_stack.

     ... and replace the statement ...

    flights_count                 = flights_organizer=>singleton->get_flights_count( ).

     ... with:

    flights_count                 = service_locator=>singleton->flights_organizer->get_flights_count( ).

-----------------------------------------------------------------------
  ZAUT401C

  1. In method setup of class tester, after line ...

    flights_organizer=>singleton  = flights_organizer_test_double=>singleton.

     ... add the following lines ...

    " Register service_locator=>singleton->flights_organizer in service locator:
    service_locator=>singleton->flights_organizer
                                  = flights_organizer=>singleton.
    clear flights_organizer=>singleton. " Prevent direct use of this singleton during test

-----------------------------------------------------------------------
  ZAUT401D

  1. Add the following instance attribute to the public section of class service_locator

    data         : o
                   o
                   o
                 , flights_report type ref
                                    to flights_reportable

-----------------------------------------------------------------------
  ZAUT401E

  1. Place the following statement at the end of the initialization block:

    service_locator=>singleton->flights_report
                                  = flights_report=>singleton.

  2. In subroutine present_report, replace the statement ...
*
    call method flights_report=>singleton->show_flights

     ... with:

    call method service_locator=>singleton->flights_report->show_flights

-----------------------------------------------------------------------
  ZAUT401F

  1. In method setup of class tester, after line ...

    flights_report=>singleton  = flights_report_test_double=>singleton.

      ... add the following lines ...

    " Register service_locator=>singleton->flights_report in service locator:
    service_locator=>singleton->flights_report
                                  = flights_report=>singleton.
    clear flights_report=>singleton. " Prevent direct use of this singleton during test

-----------------------------------------------------------------------
  ZAUT401G

  1. Define new interface service_locatable after interface flights_reportable:

interface service_locatable.
    methods      : register_flights_organizer
                     importing
                       flights_organizer
                         type ref
                           to flights_organizable
                 , register_flights_report
                     importing
                       flights_report
                         type ref
                           to flights_reportable
                 .
endinterface.

  2. Include the following statements after the public section statement in class service_locator:

    interfaces   : service_locatable
                 .
    aliases      : register_flights_organizer
                     for service_locatable~register_flights_organizer
                 , register_flights_report
                     for service_locatable~register_flights_report
                 .

  4. Add the following method implementations at the end of class service_locator:

  method register_flights_organizer.
    me->flights_organizer         = flights_organizer.
  endmethod.
  method register_flights_report.
    me->flights_report            = flights_report.
  endmethod.

  5. In the initialization block replace the statements ...

    service_locator=>singleton->flights_organizer
                                  = flights_organizer=>singleton.
    service_locator=>singleton->flights_report
                                  = flights_report=>singleton.

     ... with these statements:

    service_locator=>singleton->register_flights_organizer(
      exporting
        flights_organizer         = flights_organizer=>singleton
      ).
    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report=>singleton
      ).

  6. In method setup of class tester, replace each of the statements ...

    service_locator=>singleton->flights_organizer
                                  = flights_organizer=>singleton.

    service_locator=>singleton->flights_report
                                  = flights_report=>singleton.

     ... with their counterpart statement

    service_locator=>singleton->register_flights_organizer(
      exporting
        flights_organizer         = flights_organizer=>singleton
      ).

    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report=>singleton
      ).

-----------------------------------------------------------------------
  ZAUT402A

  1. Define new interface service_creatable after interface flights_reportable:

interface service_creatable.
    methods      : create_all_services
                 , create_flights_organizer
                 , create_flights_report
                 .
endinterface.

  2. Define new class service_factory after class flights_report_test_double:

class service_factory                  definition
                                       final
                                       create private
                                       .
  public section.
    interfaces   : service_creatable
                 .
    aliases      : create_all_services
                     for service_creatable~create_all_services
                 , create_flights_organizer
                     for service_creatable~create_flights_organizer
                 , create_flights_report
                     for service_creatable~create_flights_report
                 .
    class-data   : singleton      type ref
                                    to service_factory
                                         read-only
                 .
    class-methods: class_constructor
                 .
endclass.
class service_factory                  implementation.
  method class_constructor.
    create object service_factory=>singleton.
  endmethod.
  method create_all_services.
    me->create_flights_organizer( ).
    me->create_flights_report( ).
  endmethod.
  method create_flights_organizer.
  endmethod.
  method create_flights_report.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT402B

  3. Include the following statements as the implementation for method create_flights_organizer of class service_factory:

    data         : flights_organizer
                                  type ref
                                    to flights_organizable
                 .
    create object flights_organizer
             type flights_organizer.
    service_locator=>singleton->register_flights_organizer(
      exporting
        flights_organizer         = flights_organizer
        ).

  4. Include the following statements as the implementation for method create_flights_report of class service_factory:

    data         : flights_report
                                  type ref
                                    to flights_reportable
                 .
    create object flights_report
             type flights_report.
    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report
        ).

  5. In the initialization event block, replace the statements ...

    service_locator=>singleton->register_flights_organizer(
      exporting
        flights_organizer         = flights_organizer=>singleton
      ).
    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report=>singleton
      ).

     ... with the single statement:

    service_factory=>singleton->create_all_services( ).

  6. Replace the implementation of method setup of class tester with the following statements:

    service_factory=>singleton->create_all_services( ).
    " To prevent the possibility of interacting tests, refresh all singleton objects:
    create object flights_organizer_test_double=>singleton
             type flights_organizer_test_double.
    create object flights_report_test_double=>singleton
             type flights_report_test_double.
    " Register flights_organizer_test_double=>singleton as flights_organizer service:
    service_locator=>singleton->register_flights_organizer(
      exporting
        flights_organizer         = flights_organizer_test_double=>singleton
      ).
    clear flights_organizer=>singleton. " Prevent direct use of this singleton during test
    " Register flights_report_test_double=>singleton as flights_report service:
    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report_test_double=>singleton
      ).
    clear flights_report=>singleton. " Prevent direct use of this singleton during test
    carrier                       = american_airlines.
    call method service_locator=>singleton->flights_organizer->get_flights_via_carrier
      exporting
        carrier                   = carrier
        .

-----------------------------------------------------------------------
  ZAUT402C

  2. Replace the implementation of method setup of class tester with the following statements:

    data         : flights_organizer_test_double
                                  type ref
                                    to flights_organizable
                 , flights_report_test_double
                                  type ref
                                    to flights_reportable
                 .
    service_factory=>singleton->create_all_services( ).
    " To prevent the possibility of interacting tests, refresh all singleton objects:
    create object flights_organizer_test_double
             type flights_organizer_test_double.
    create object flights_report_test_double
             type flights_report_test_double.
    " Register flights_organizer_test_double=>singleton as flights_organizer service:
    service_locator=>singleton->register_flights_organizer(
      exporting
        flights_organizer         = flights_organizer_test_double
      ).
    " Register flights_report_test_double=>singleton as flights_report service:
    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report_test_double
      ).
    carrier                       = american_airlines.
    call method service_locator=>singleton->flights_organizer->get_flights_via_carrier
      exporting
        carrier                   = carrier
        .

-----------------------------------------------------------------------
  ZAUT402D

  1. Include the following interface on the interfaces statement in class service_factory

    interfaces   : o
                   o
                   o
                 , flights_organizer_testable

  2. In method create_flights_organizer of class service_factory, replace the statement ...

    create object flights_organizer
             type flights_organizer.

     ... with the statement:

    create object flights_organizer
             type flights_organizer_test_double.

-----------------------------------------------------------------------
  ZAUT402E

  1. Apply the "for testing" clause after the create private clauses in the definition statements of
     classes flights_organizer_test_double and flights_report_test_double

                                       for testing


  4. Reset method create_flights_organizer of class service_factory to create an object of type flights_organizer

    create object flights_organizer
             type flights_organizer.

-----------------------------------------------------------------------
  ZAUT402F

  1. Create new test class service_factory_autester for testing the service factory class.
     Place it at the end of the program using the following code:

class service_factory_autester         definition
                                       final
                                       for testing
                                       risk level harmless
                                       duration short
                                       .
  private section.
    methods      : setup
                 , create_all_services
                     for testing
                 , create_flights_organizer
                     for testing
                 , create_flights_report
                     for testing
                 .
endclass.
class service_factory_autester         implementation.
  method setup.
  endmethod.
  method create_all_services.
    cl_abap_unit_assert=>fail(
      msg                         = 'Test method not implemented'
      ).
  endmethod.
  method create_flights_organizer.
    cl_abap_unit_assert=>fail(
      msg                         = 'Test method not implemented'
      ).
  endmethod.
  method create_flights_report.
    cl_abap_unit_assert=>fail(
      msg                         = 'Test method not implemented'
      ).
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT402G

  1. In method setup of class service_factory_autester, replace the assert fail statement with the following statements:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).

  2. In method create_all_services of class service_factory_autester, replace the assert fail
     statement with the following statements:

    service_factory=>singleton->create_all_services( ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->flights_report
      ).

  3. In method create_flights_organizer of class service_factory_autester, replace the assert fail
     statement with the following statements:

    service_factory=>singleton->create_flights_organizer( ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).

  4. In method create_flights_report of class service_factory_autester, replace the assert fail
     statement with the following statements:

    service_factory=>singleton->create_flights_report( ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->flights_report
      ).

-----------------------------------------------------------------------
  ZAUT402H

  1. Define new empty interface service_locator_testable following interface service_creatable
     using the following statements:

interface service_locator_testable.
endinterface.

  2. Apply the "friends service_locator_testable" statement to class service_locator after the "create private" statement:

                                       friends service_locator_testable

  3. Create new class service_locator_test_helper ahead of class tester using the following statements:

class service_locator_test_helper      definition
                                       final
                                       for testing
                                       .
  public section.
    interfaces   : service_locator_testable
                 .
    methods      : clear_all_service_locators
                 .
endclass.
class service_locator_test_helper      implementation.
  method clear_all_service_locators.
    clear: service_locator=>singleton->flights_organizer
         , service_locator=>singleton->flights_report
         .
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).
  endmethod.
endclass.

  4. Replace the statements in method setup of class service_factory_autester with the following statements:

    data         : service_locator_test_helper
                                  type ref
                                    to service_locator_test_helper
                 .
    create object service_locator_test_helper.
    service_locator_test_helper->clear_all_service_locators( ).

-----------------------------------------------------------------------
  ZAUT501A

  1. Add new test method create_revenue_calculator to class service_factory_autester:
     o add method definition for create_revenue_calculator to the private section of class service_factory_autester
       after the definition for method create_flights_report:

    methods      : o
                   o
                   o
                 , create_revenue_calculator
                     for testing

     o include the following method implementation after the implementation for method create_flights_report:

  method create_revenue_calculator.
    cl_abap_unit_assert=>fail(
      msg                         = 'Test method not implemented'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT501B

  1. Add to class service_locator new public attribute revenue_calculator, after the attribute flights_report:

    data         : o
                   o
                   o
                 , revenue_calculator
                                  type ref
                                    to zcl_flight_revenue_calculator
                                         read-only

  2. In method clear_all_service_locators of class service_locator_test_helper
     o add the following line to the clear statement:

    clear: o
           o
           o
         , service_locator=>singleton->revenue_calculator

     o at end of method add an assertion to test that this attribute is not bound:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).

  3. Add to end of method create_all_services of class service_factory_autester an assertion
     to test that attribute service_locator=>singleton->revenue_calculator is bound:

    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).

  4. Add to end of methods create_flights_organizer and create_flights_report of class service_factory_autester
     an assertion to test that attribute service_locator=>singleton->revenue_calculator is not bound

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).

  5. Replace failure assertion in method create_revenue_calculator of class service_factory_autester
     with the following code:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).

-----------------------------------------------------------------------
  ZAUT501C

  2. Change global class zcl_flight_revenue_calculator to implement global interface zif_flight_revenue_calculable:
     o using the source-code based editor, replace the public section with the following code:

  interfaces     : zif_flight_revenue_calculable
                 .
  aliases        : get_flight_revenue
                     for zif_flight_revenue_calculable~get_flight_revenue
                 .

  class-data singleton type ref to zif_flight_revenue_calculable.

  class-methods class_constructor.

     o using the source-code based editor, change the class_constructor implementation from ...

    create object singleton.

       ... to:

    create object singleton type zcl_flight_revenue_calculator.

  3. Add the following method definition to interface service_locatable, to follow the
     definition for register_flights_report:

    methods      : o
                   o
                   o
                 , register_revenue_calculator
                     importing
                       revenue_calculator
                         type ref
                           to zif_flight_revenue_calculable

  4. Add the following method definition to interface service_creatable, to follow the
     definition for create_flights_report:

    methods      : o
                   o
                   o
                 , create_revenue_calculator

  5. Add the following to the aliases statement of class service_locator after the
     one for register_flights_report:

    aliases      : o
                   o
                   o
                 , register_revenue_calculator
                     for service_locatable~register_revenue_calculator

  7. Add the following method implementation to class service_locator:

  method register_revenue_calculator.
    me->revenue_calculator        = revenue_calculator.
  endmethod.

  8. Add the following to the aliases statement of class service_factory after the
     one for create_flights_report:

    aliases      : o
                   o
                   o
                 , create_revenue_calculator
                     for service_creatable~create_revenue_calculator

  9. Add the following statement to the end of method create_all_services of class service_factory:

    me->create_revenue_calculator( ).

 10. Add the following method implementation to class service_factory after the one for create_flights_report:

  method create_revenue_calculator.
    data         : revenue_calculator
                                  type ref
                                    to zif_flight_revenue_calculable
                 .
    try.
      revenue_calculator          ?= zcl_flight_revenue_calculator=>singleton.
    catch cx_sy_move_cast_error.
    endtry.
    service_locator=>singleton->register_revenue_calculator(
      exporting
        revenue_calculator        = revenue_calculator
        ).
  endmethod.

 11. Add the following statement to the start of method create_revenue_calculator of class service_factory_autester:

    service_factory=>singleton->create_revenue_calculator( ).

-----------------------------------------------------------------------
  ZAUT501D

  1. In subroutine adjust_flight_revenue, replace statement ...

      call method zcl_flight_revenue_calculator=>singleton->get_flight_revenue

     ... with:

      call method service_locator=>singleton->revenue_calculator->get_flight_revenue

-----------------------------------------------------------------------
  ZAUT501E

  1. In method adjust_flight_revenue of class tester, replace statement ...

      flight_revenue              = flights_entry-price * flights_entry-seatsocc.

     ... with:

      flight_revenue              = 12345.

-----------------------------------------------------------------------
  ZAUT501F

  1. Create new global class zcl_revenue_calc_test_double:
     o using the source-code based editor, define the following new constant in the public section:

  constants flight_revenue_for_test type sflight-paymentsum value 12345.


     o replace implementation of method get_flight_revenue with the following statement:

    flight_revenue                = flight_revenue_for_test.

  2. In method adjust_flight_revenue of class tester, do the following:
     o include the following statement ahead of the perform statement subroutine adjust_flight_revenue:

    service_locator=>singleton->register_revenue_calculator(
      exporting
        revenue_calculator        = zcl_revenue_calc_test_double=>singleton
        ).

     o replace statement ...

      flight_revenue              = 12345.

       ... with

      flight_revenue              = zcl_revenue_calc_test_double=>flight_revenue_for_test.

-----------------------------------------------------------------------
  ZAUT502A

  1. Include the following instance attribute in the public section of class service_locator
     after the one for revenue_calculator:

    data         : o
                   o
                   o
                 , discount_calculator
                                  type funcname

  2. In subroutine apply_flight_discount, change the call function statement from ...

      call function 'ZCALCULATE_DISCOUNTED_AIRFARE'

     ... to:

      call function service_locator=>singleton->discount_calculator

-----------------------------------------------------------------------
  ZAUT502B

  1. Include the following method definition with interface service_locatable after
     the one for register_revenue_calculator:

    methods      : o
                   o
                   o
                 , register_discount_calculator
                     importing
                       discount_calculator
                         type funcname

  2. Include the following method definition with interface service_creatable after
     the one for create_revenue_calculator:

    methods      : o
                   o
                   o
                 , create_discount_calculator

  3. Include the following alias in the public section of class service_locator after
     the one for register_revenue_calculator:

    aliases      : o
                   o
                   o
                 , register_discount_calculator
                     for service_locatable~register_discount_calculator

  4. Include the following empty method to clsas service_locator after
     the one for register_revenue_calculator:

  method register_discount_calculator.
  endmethod.

  5. Include the following alias in the public section of class service_factory after
     the one for create_revenue_calculator:

    aliases      : o
                   o
                   o
                 , create_discount_calculator
                     for service_creatable~create_discount_calculator

  6. Include the following extra statement at the end of method create_all_service of class service_factory:

    me->create_discount_calculator( ).

  7. Include the following empty method to class service_factory after
     the one for create_revenue_calculator:

  method create_discount_calculator.
  endmethod.

   8. Add the following line to the clear statement in method clear_all_service_locators
      of class service_locator_test_helper:

    clear: o
           o
           o
         , service_locator=>singleton->discount_calculator

  9. Include the following statement at the end of method clear_all_service_locators
     of class service_locator_test_helper:

    cl_abap_unit_assert=>assert_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).

 10. Include the following methods statement in the private secton of class service_factory_autester after
     the one for create_revenue_calculator:

    methods      : o
                   o
                   o
                 , create_discount_calculator
                     for testing

 11. Include the following statement at the end of method create_all_services
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).

 12. Include the following statement at the end of method create_flights_organizer
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).

 13. Include the following statement at the end of method create_flights_report
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).

 14. Include the following statement at the end of method create_revenue_calculator
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).

 15. Specify the following method implementation at the end
     of class service_factory_autester:

  method create_discount_calculator.
    service_factory=>singleton->create_discount_calculator( ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).
    cl_abap_unit_assert=>assert_not_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT502C

  1. Specify the following implementation for method create_discount_calculator of class service_locator:

    me->discount_calculator       = discount_calculator.

  2. Specify the following implementation for method register_discount_calculator of class service_factory:

    constants    : discount_calculator
                                  type funcname  value 'ZCALCULATE_DISCOUNTED_AIRFARE'
                 .
    service_locator=>singleton->register_discount_calculator(
      exporting
        discount_calculator       = discount_calculator
        ).

-----------------------------------------------------------------------
  ZAUT502D

  2. After test method apply_flight_discount_over_100, define test method apply_flight_discount_50
     o add method definition for apply_flight_discount_50 to the private section of class tester following
       the definition for method apply_flight_discount_over_100:

    methods      : o
                   o
                   o
                 , apply_flight_discount_over_100
                     for testing
                 , apply_flight_discount_50
                     for testing

     o include the following method implementation after the implementation for method apply_flight_discount_over_100:

  method apply_flight_discount_50.
    constants    : discount_50_percent
                                  type num03     value 50
                 .
    data         : flights_entry  like line
                                    of service_locator=>singleton->flights_organizer->flights_stack
                 , flights_stack_before
                                  type flights_organizable=>flights_list
                 .
    cl_abap_unit_assert=>assert_not_initial(
      act                         = service_locator=>singleton->flights_organizer->flights_stack
      msg                         = 'No records available for testing flight discount'
      ).
    loop at service_locator=>singleton->flights_organizer->flights_stack
       into flights_entry.
      append flights_entry
          to flights_stack_before.
    endloop.
    perform apply_flight_discount using discount_50_percent
                               changing service_locator=>singleton->flights_organizer->flights_stack.
    cl_abap_unit_assert=>assert_equals(
      act                         = service_locator=>singleton->flights_organizer->flights_stack
      exp                         = flights_stack_before
      msg                         = 'Unequal discounted flights stacks'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT502E

  1. Via SE37, copy funciton module ZCALCULATE_DISCOUNTED_AIRFARE to ZCALC_DISCOUNT_AIRFARE_TSTDBL:
     o provide it with the following implementation:

    constants    : test_double_discount
                                  type s_price   value '123.45'
                 .
    discount_fare                 = test_double_discount.


  2. Include the following constant in method apply_flight_discount_50 of class tester :

    constants    : o
                   o
                   o
                 , discount_calculator
                                  type funcname  value 'ZCALC_DISCOUNT_AIRFARE_TSTDBL'

  3. Include the following data definition in method apply_flight_discount_50 of class tester
     after the one for flights_stack_before:

    data         : o
                   o
                   o
                 , test_double_discount_fare
                                  type s_price

  4. Include the following statements in method apply_flight_discount_50 of class tester
     ahead of the loop statement:

    service_locator=>singleton->register_discount_calculator(
      exporting
        discount_calculator       = discount_calculator
        ).
    call function service_locator=>singleton->discount_calculator
      exporting
        full_fare                 = 00
        discount                  = 00
      importing
        discount_fare             = test_double_discount_fare
      exceptions
        others                    = 0
        .

  5. Include the following statement in method apply_flight_discount_50 of class tester
     ahead of the append statement:

      flights_entry-price         = test_double_discount_fare.

-----------------------------------------------------------------------
  ZAUT503A

  1. Include the following interface ahead of interface flights_organizer_testable:

interface message_dispatchable.
    types        : message_type   type symsgty
                 , message_id     type symsgid
                 , message_number type symsgno
                 , message_text   type symsgv
                 .
    constants    : status_message type message_dispatchable=>message_type
                                                 value 'S'
                 , information_message
                                  type message_dispatchable=>message_type
                                                 value 'I'
                 , warning_message
                                  type message_dispatchable=>message_type
                                                 value 'W'
                 , error_message  type message_dispatchable=>message_type
                                                 value 'E'
                 , abort_message  type message_dispatchable=>message_type
                                                 value 'A'
                 , exit_message   type message_dispatchable=>message_type
                                                 value 'X'
                 .
    methods      : issue_identified_message
                     importing
                       message_severity
                         type message_dispatchable=>message_type
                           default message_dispatchable=>status_message
                       message_display_severity
                         type message_dispatchable=>message_type optional
                       id
                         type message_dispatchable=>message_id
                       number
                         type message_dispatchable=>message_number
                       text_01
                         type message_dispatchable=>message_text
                       text_02
                         type message_dispatchable=>message_text optional
                       text_03
                         type message_dispatchable=>message_text optional
                       text_04
                         type message_dispatchable=>message_text optional
                 , issue_unidentified_message
                     importing
                       message_severity
                         type message_dispatchable=>message_type
                           default message_dispatchable=>status_message
                       message_display_severity
                         type message_dispatchable=>message_type optional
                       text
                         type clike
                 .
endinterface.

  2. Include the following attribute in the public section of class service_locator after
     the one for discount_calculator:

    data         : o
                   o
                   o
                 , message_dispatcher
                                  type ref
                                    to message_dispatchable
                                         read-only

-----------------------------------------------------------------------
  ZAUT503B

  1. In method clear_all_service_locators of class service_locator_test_helper, do the following:
     o add the following line to the clear statement:

    clear: o
           o
           o
         , service_locator=>singleton->message_dispatcher

     o add the following assertion at the end of the method:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).

  2. Add the following test method definition to class service_factory_autester after
     the one for create_discount_calculator:

    methods      : o
                   o
                   o
                 , create_message_dispatcher
                     for testing

  3. Add the following assertion to the end of method create_all_services
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).

  4. Add the following assertion to the end of method create_flights_organizer
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).

  5. Add the following assertion to the end of method ccreate_flights_report
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).

  6. Add the following assertion to the end of method create_revenue_calculator
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).

  7. Add the following assertion to the end of method create_discount_calculator
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).

  8. Add the following method implementation at the end of the class:

  method create_message_dispatcher.
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).
    cl_abap_unit_assert=>assert_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT503C

  1. Add the following method definition to interface service_locatable after
     the one for register_discount_calculator:

    methods      : o
                   o
                   o
                 , register_message_dispatcher
                     importing
                       message_dispatcher
                         type ref
                           to message_dispatchable

  2. Add the following method definition to interface service_creatable after
     the one for create_discount_calculator:

    methods      : o
                   o
                   o
                 , create_message_dispatcher

  3. Add the following to the aliases statement of class service_locator after
     the one for register_discount_calculator:

    aliases      : o
                   o
                   o
                 , register_message_dispatcher
                     for service_locatable~register_message_dispatcher

  4. Add the following method implementation to class service_locator after
     the one for register_discount_calculator:

  method register_message_dispatcher.
    me->message_dispatcher        = message_dispatcher.
  endmethod.

  5. Add the following new class definition after class service_locator:

class messenger                        definition
                                       final
                                       .
  public section.
    interfaces   : message_dispatchable
                 .
    aliases      : issue_identified_message
                     for message_dispatchable~issue_identified_message
                 , issue_unidentified_message
                     for message_dispatchable~issue_unidentified_message
                 .
endclass.
class messenger                        implementation.
  method issue_identified_message.
    data         : message_display_type
                                  type message_dispatchable=>message_type
                 .
    message_display_type          = message_display_severity.
    if message_display_type is initial.
      message_display_type        = message_severity.
    endif.
    " Issue message using message statement:
    message id      id
            type    message_severity
            number  number
            display like message_display_type
            with    text_01
                    text_02
                    text_03
                    text_04
            .
  endmethod.
  method issue_unidentified_message.
    data         : message_display_type
                                  type message_dispatchable=>message_type
                 .
    message_display_type          = message_display_severity.
    if message_display_type is initial.
      message_display_type        = message_severity.
    endif.
    " Issue message using message statement:
    message text type message_severity display like message_display_type.
  endmethod.
endclass.

  6. Add the following to the aliases statement of class service_factory after
     the one for create_discount_calculator:

    aliases      : o
                   o
                   o
                 , create_message_dispatcher
                     for service_creatable~create_message_dispatcher

  7. Add the following statement to the end of method create_all_services of class service_factory:

    me->create_message_dispatcher( ).

  8. Add the following method implementation to class service_factory after
     the one for create_discount_calculator:

  method create_message_dispatcher.
    data         : message_dispatcher
                                  type ref
                                    to message_dispatchable
                 .
    create object message_dispatcher
             type messenger.
    service_locator=>singleton->register_message_dispatcher(
      exporting
        message_dispatcher        = message_dispatcher
        ).
  endmethod.

  9. Add the following statement to the start of method create_message_dispatcher
     of class service_factory_autester:

    service_factory=>singleton->create_message_dispatcher( ).

-----------------------------------------------------------------------
  ZAUT503D

  1. In subroutine show_flights_count, replace the message statement with the following:

    service_locator=>singleton->message_dispatcher->issue_identified_message(
      exporting
        id                        = '0k'
        number                    = 000
        text_01                   = conv #( flights_count )
        text_02                   = 'flights are available for carrier'
        text_03                   = conv #( carrier )
      ).

-----------------------------------------------------------------------
  ZAUT503F

  1. Define subroutine process_selection using the following model, placing it ahead
     of subroutine present_report:

form process_selection using discount
                               type discount
                             carrier
                               type flights_organizable=>carrier.
endform.

  3. Replace the code moved from the at selection-screen event block with the following statement:

    perform process_selection using discount
                                    carrier.

-----------------------------------------------------------------------
  ZAUT503G

  1. In class tester, define the following methods for testing, after
     the definition for method teardown:
     o process_selection_bad_discount
     o process_selection_bad_carrier
     o process_selection_good_carrier
     The implementation for each one should contain the following test assertion:

    cl_abap_unit_assert=>fail(
      msg                         = 'Test method not implemented'
      ).

-----------------------------------------------------------------------
  ZAUT503H

  1. In class tester, replace the test assertion implemented for
     method process_selection_good_carrier with the following implementation:

    set_bogus_message( ).
    assert_message_is_bogus( ).
    perform process_selection using 00
                              american_airlines.
    " With these specified calling parameters, no message should be issued by
    " subroutine process_selection, so the message content should remain unchanged:
    assert_message_is_bogus( ).

-----------------------------------------------------------------------
  ZAUT503I

  1. In class tester, replace the test assertion implemented for
     method process_selection_bad_discount with the following implementation:

    set_bogus_message( ).
    assert_message_is_bogus( ).
    perform process_selection using 110
                              american_airlines.
    " With these specified calling parameters, a warning message should be issued by
    " subroutine process_selection, so the message content should be changed:
    assert_message_not_bogus( ).

-----------------------------------------------------------------------
  ZAUT503J

  1. In class tester, replace the test assertion implemented for
     method process_selection_bad_carrier with the following implementation:

    constants    : bogus_carrier  type flights_organizable=>carrier
                                                 value '??'
                 .
    set_bogus_message( ).
    assert_message_is_bogus( ).
    perform process_selection using 00
                              bogus_carrier.
    " With these specified calling parameters, an error message should be issued by
    " subroutine process_selection, so the message content should be changed:
    assert_message_not_bogus( ).

-----------------------------------------------------------------------
  ZAUT503K

  1. Define class messenger_test_double as follows, placing it after class messenger:

class messenger_test_double            definition
                                       final
                                       for testing
                                       .
  public section.
    interfaces   : message_dispatchable
                 .
    aliases      : issue_identified_message
                     for message_dispatchable~issue_identified_message
                 , issue_unidentified_message
                     for message_dispatchable~issue_unidentified_message
                 .
    types        : begin of identified_message_row
                 ,   type         type message_dispatchable=>message_type
                 ,   display_type type message_dispatchable=>message_type
                 ,   id           type message_dispatchable=>message_id
                 ,   number       type message_dispatchable=>message_number
                 ,   text_01      type message_dispatchable=>message_text
                 ,   text_02      type message_dispatchable=>message_text
                 ,   text_03      type message_dispatchable=>message_text
                 ,   text_04      type message_dispatchable=>message_text
                 , end   of identified_message_row
                 , identified_message_list
                                  type standard table
                                    of identified_message_row
                 , begin of unidentified_message_row
                 ,   type         type message_dispatchable=>message_type
                 ,   display_type type message_dispatchable=>message_type
                 ,   text         type message_dispatchable=>message_text
                 , end   of unidentified_message_row
                 , unidentified_message_list
                                  type standard table
                                    of unidentified_message_row
                 .
    data         : identified_message_stack
                                  type identified_message_list
                                         read-only
                 , unidentified_message_stack
                                  type unidentified_message_list
                                         read-only
                 .
endclass.
class messenger_test_double            implementation.
  method issue_identified_message.
    data         : identified_message_entry
                                  like line
                                    of identified_message_stack
                 .
    identified_message_entry-type
                                  = message_severity.
    if message_display_severity is not initial.
      identified_message_entry-display_type
                                  = message_display_severity.
    else.
      identified_message_entry-display_type
                                  = message_severity.
    endif.
    identified_message_entry-id   = id.
    identified_message_entry-number
                                  = number.
    identified_message_entry-text_01
                                  = text_01.
    identified_message_entry-text_02
                                  = text_02.
    identified_message_entry-text_03
                                  = text_03.
    identified_message_entry-text_04
                                  = text_04.
    append identified_message_entry
        to identified_message_stack.
    sy-msgty                      = identified_message_entry-type.
    sy-msgid                      = identified_message_entry-id.
    sy-msgno                      = identified_message_entry-number.
    sy-msgv1                      = identified_message_entry-text_01.
    sy-msgv2                      = identified_message_entry-text_02.
    sy-msgv3                      = identified_message_entry-text_03.
    sy-msgv4                      = identified_message_entry-text_04.
  endmethod.
  method issue_unidentified_message.
    constants    : unidentified_message_id
                                  type message_dispatchable=>message_id
                                                 value '00'
                 , unidentified_message_number
                                  type message_dispatchable=>message_number
                                                 value '000'
                 .
    data         : unidentified_message_entry
                                  like line
                                    of unidentified_message_stack
                 , begin of message_content
                 ,   text_01      type message_dispatchable=>message_text
                 ,   text_02      type message_dispatchable=>message_text
                 ,   text_03      type message_dispatchable=>message_text
                 ,   text_04      type message_dispatchable=>message_text
                 , end   of message_content
                 .
    unidentified_message_entry-type
                                  = message_severity.
    if message_display_severity is not initial.
      unidentified_message_entry-display_type
                                  = message_display_severity.
    else.
      unidentified_message_entry-display_type
                                  = message_severity.
    endif.
    unidentified_message_entry-text
                                  = text.
    append unidentified_message_entry
        to unidentified_message_stack.
    sy-msgty                      = unidentified_message_entry-type.
    sy-msgid                      = unidentified_message_id.
    sy-msgno                      = unidentified_message_number.
    message_content               = text.
    sy-msgv1                      = message_content-text_01.
    sy-msgv2                      = message_content-text_02.
    sy-msgv3                      = message_content-text_03.
    sy-msgv4                      = message_content-text_04.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT503L

  1. In subroutine process_selection, replace the message statement after the call to method
     service_locator=>singleton->flights_organizer->get_flights_count with the following:

      service_locator=>singleton->message_dispatcher->issue_identified_message(
        exporting
          message_severity        = message_dispatchable=>error_message
          id                      = '0K'
          number                  = 000
          text_01                 = 'No flights match carrier'
          text_03                 = conv #( carrier )
        ).

  2. In method setup of class tester:
     o define data field messenger_test_double as reference to message_dispatchable
       following flights_report_test_double:

    data         : o
                   o
                   o
                 , messenger_test_double
                                  type ref
                                    to message_dispatchable

     o add the following code to the end of the method:

    " Instantiate messenger_test_double:
    create object messenger_test_double
             type messenger_test_double.
    " Register messenger_test_double as message_dispatcher service:
    service_locator=>singleton->register_message_dispatcher(
      exporting
        message_dispatcher        = messenger_test_double
      ).

-----------------------------------------------------------------------
  ZAUT503M

  1. Add new test method process_selection_bad_values to class tester using the following implementation:
     o add method definition for process_selection_bad_values to the private section of class tester
       after the definition for method teardown:

                 , process_selection_bad_values
                     for testing

     o include the following method implementation after the implementation for method teardown:

  method process_selection_bad_values.
    constants    : bogus_carrier  type flights_organizable=>carrier
                                                 value '??'
                 .
    data         : messenger_test_double
                                  type ref
                                    to messenger_test_double
                 .
    set_bogus_message( ).
    assert_message_is_bogus( ).
    perform process_selection using 110
                              bogus_carrier.
    " With these specified calling parameters, both a warning message and
    " an error message should be issued by subroutine process_selection,
    " so the message content should be changed:
    assert_message_not_bogus( ).
    " We also should find that there are two identified messages registered in the
    " messenger_test_double; one is a warning message and the other is an error message:
    try.
      messenger_test_double       ?= service_locator=>singleton->message_dispatcher.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method process_selection_bad_values'
        ).
    endtry.
    cl_abap_unit_assert=>assert_equals(
      act                         = lines( messenger_test_double->identified_message_stack )
      exp                         = 02
      msg                         = 'Unexpected number of messages held by messenger test double'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT503N

  1. In subroutine process_selection, replace the warning message statement checking
     for discount greater than 100 with the following statement:

      service_locator=>singleton->message_dispatcher->issue_identified_message(
        exporting
          message_severity        = message_dispatchable=>warning_message
          id                      = '0K'
          number                  = 000
          text_01                 = 'Fare discount percentage exceeding 100'
          text_03                 = 'will be ignored'
        ).

-----------------------------------------------------------------------
  ZAUT503O

  1. In method process_selection_bad_values of class tester, do the following:
     o include the following data definitions on the data statement:

    data         : o
                   o
                   o
                 , identified_message_entry
                                  like line
                                    of messenger_test_double->identified_message_stack
                 , error_message_count
                                  type int4
                 , warning_message_count
                                  type int4

     o include the following code at the end of the method:

    loop at messenger_test_double->identified_message_stack
       into                        identified_message_entry.
      case identified_message_entry-type.
        when message_dispatchable=>error_message.
          add 01 to error_message_count.
        when message_dispatchable=>warning_message.
          add 01 to error_message_count.
      endcase.
    endloop.
    cl_abap_unit_assert=>assert_equals(
      act                         = error_message_count
      exp                         = 01
      msg                         = 'Unexpected number of error messages held by messenger test double'
      ).
    cl_abap_unit_assert=>assert_equals(
      act                         = warning_message_count
      exp                         = 01
      msg                         = 'Unexpected number of warning messages held by messenger test double'
      ).

-----------------------------------------------------------------------
  ZAUT503P

  1. In method process_selection_bad_values of class tester, change the statement after the statement ...

        when message_dispatchable=>warning_message.

     ... from ...

          add 01 to error_message_count.

     ... to:

          add 01 to warning_message_count.

-----------------------------------------------------------------------
  ZAUT504A

  1. Include the following class after class flights_report:

class flights_report_old_format        definition
                                       final
                                       friends flights_report_testable
                                       .
  public section.
    interfaces   : flights_reportable
                 .
    aliases      : show_flights
                     for flights_reportable~show_flights
                 .
endclass.
class flights_report_old_format        implementation.
  method show_flights.
    data         : flights_entry  like line
                                    of flights_stack
                 .
    loop at flights_stack
       into flights_entry.
      new-line.
      write: flights_entry-carrid
           , flights_entry-connid
           , flights_entry-fldate
           , flights_entry-price
           , flights_entry-currency
           , flights_entry-planetype
           , flights_entry-seatsmax
           , flights_entry-seatsocc
           , flights_entry-paymentsum
           , flights_entry-seatsmax_b
           , flights_entry-seatsocc_b
           , flights_entry-seatsmax_f
           , flights_entry-seatsocc_f
           .
    endloop.
  endmethod.
endclass.

  2. Change method create_flights_report of class service_factory to create
     a flights_report object of type flights_report_old_format:

    create object flights_report
             type flights_report_old_format.

-----------------------------------------------------------------------
  ZAUT504C

  1. Add the following interface definition ahead of interface message_dispatchable:

interface report_writable.
    types        : value_type     type c length 100
                 , format_type    type c length 100
                 .
    methods      : new_line
                 , write
                     importing
                       format
                         type report_writable=>format_type
                       value
                         type report_writable=>value_type
                 .
endinterface.

  2. In the public section of class service_locator, add the following attribute after
     the one for message_dispatcher:

    data         : o
                   o
                   o
                 , report_writer  type ref
                                    to report_writable
                                         read-only

-----------------------------------------------------------------------
  ZAUT504D

  1. In method clear_all_service_locators of class service_locator_test_helper, do the following:
     o add the following line to the clear statement:

    clear: o
           o
           o
         , service_locator=>singleton->report_writer

     o add the following assertion at the end of the method:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  2. Add the following test method definition to class service_factory_autester after
     the one for create_message_dispatcher:

    methods      : o
                   o
                   o
                 , create_report_writer
                     for testing

  3. Add the following assertion to the end of method create_all_services
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  4. Add the following assertion to the end of method create_flights_organizer
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  5. Add the following assertion to the end of method create_flights_report
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  6. Add the following assertion to the end of method create_revenue_calculator
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  7. Add the following assertion to the end of method create_discount_calculator
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  8. Add the following assertion to the end of method create_message_dispatcher
     of class service_factory_autester:

    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->report_writer
      ).

  9. Add the following method implementation at the end of the class:

  method create_report_writer.
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_organizer
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->flights_report
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->revenue_calculator
      ).
    cl_abap_unit_assert=>assert_initial(
      act                         = service_locator=>singleton->discount_calculator
      ).
    cl_abap_unit_assert=>assert_not_bound(
      act                         = service_locator=>singleton->message_dispatcher
      ).
    cl_abap_unit_assert=>assert_bound(
      act                         = service_locator=>singleton->report_writer
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT504E

  1. Add the following method definition to interface service_locatable after
     the one for register_message_dispatcher:

    methods      : o
                   o
                   o
                 , register_report_writer
                     importing
                       report_writer
                         type ref
                           to report_writable

  2. Add the following method definition to interface service_creatable after
     the one for create_message_dispatcher:

    methods      : o
                   o
                   o
                 , create_report_writer

  3. Add the following to the aliases statement of class service_locator after
     the one for register_message_dispatcher:

    aliases      : o
                   o
                   o
                 , register_report_writer
                     for service_locatable~register_report_writer

  4. Add the following method implementation to class service_locator after
     the one for register_message_dispatcher:

  method register_report_writer.
    me->report_writer             = report_writer.
  endmethod.

  5. Add the following new class definition after class service_locator:

class report_writer                    definition
                                       final
                                       .
  public section.
    interfaces   : report_writable
                 .
    aliases      : new_line
                     for report_writable~new_line
                 , write
                     for report_writable~write
                 .
endclass.
class report_writer                    implementation.
  method new_line.
    new-line.
  endmethod.
  method write.
    constants    : default_format type sy-msgv1   value 'SY-MSGV1'
                 .
    data         : value_formatting_field
                                  type ref
                                    to data
                 .
    field-symbols: <value_formatting_field>
                                  type any
                 .
    try.
      create data value_formatting_field type (format).
    catch cx_sy_create_data_error.
      create data value_formatting_field type (default_format).
    endtry.
    if value_formatting_field     is bound.
      assign  value_formatting_field->*
          to <value_formatting_field>.
    endif.
    if <value_formatting_field>   is assigned.
      <value_formatting_field>    = value.
      write <value_formatting_field>.
    else.
      write value.
    endif.
  endmethod.
endclass.

  6. Add the following to the aliases statement of class service_factory after
     the one for create_message_dispatcher:

    aliases      : o
                   o
                   o
                 , create_report_writer
                     for service_creatable~create_report_writer

  7. Add the following statement to the end of method create_all_services
     of class service_factory:

    me->create_report_writer( ).

  8. Add the following method implementation to class service_factory after
    the one for create_message_dispatcher:

  method create_report_writer.
    data         : report_writer  type ref
                                    to report_writable
                 .
    create object report_writer
             type report_writer.
    service_locator=>singleton->register_report_writer(
      exporting
        report_writer             = report_writer
        ).
  endmethod.

  9. Add the following statement to the start of method create_revenue_calculator
     of class service_factory_autester:

    service_factory=>singleton->create_report_writer( ).

-----------------------------------------------------------------------
  ZAUT504F

  1. In method show_flights of class flights_report_old_format, replace the new-line and write
     statements with the following statements:

      service_locator=>singleton->report_writer->new_line( ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-carrid'
          value                   = conv #( flights_entry-carrid )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-connid'
          value                   = conv #( flights_entry-connid )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-fldate'
          value                   = conv #( flights_entry-fldate )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-price'
          value                   = conv #( flights_entry-price )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-currency'
          value                   = conv #( flights_entry-currency )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-planetype'
          value                   = conv #( flights_entry-planetype )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-seatsmax'
          value                   = conv #( flights_entry-seatsmax )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-seatsocc'
          value                   = conv #( flights_entry-seatsocc )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-paymentsum'
          value                   = conv #( flights_entry-paymentsum )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-seatsmax_b'
          value                   = conv #( flights_entry-seatsmax_b )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-seatsocc_b'
          value                   = conv #( flights_entry-seatsocc_b )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-seatsmax_f'
          value                   = conv #( flights_entry-seatsmax_f )
        ).
      service_locator=>singleton->report_writer->write(
        exporting
          format                  = 'flights_organizable=>flights_row-seatsocc_f'
          value                   = conv #( flights_entry-seatsocc_f )
        ).

-----------------------------------------------------------------------
  ZAUT504G

  1. Add new class report_writer_test_double after
     class report_writer using the following code:

class report_writer_test_double        definition
                                       final
                                       .
  public section.
    interfaces   : report_writable
                 .
    aliases      : new_line
                     for report_writable~new_line
                 , write
                     for report_writable~write
                 .
    data         : number_of_lines_written
                                  type int4
                 .
  private section.
    data         : new_line_pending
                                  type abap_bool value abap_true
                 .
endclass.
class report_writer_test_double        implementation.
  method new_line.
    new_line_pending              = abap_true.
  endmethod.
  method write.
    if new_line_pending           = abap_true.
      add 01 to number_of_lines_written.
      new_line_pending            = abap_false.
    endif.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT504H

  1. In method setup of class tester:
     o define data field messenger_test_double as reference to report_writable after
       the one for messenger_test_double:

    data         : o
                   o
                   o
                 , report_writer_test_double
                                  type ref
                                    to report_writable

     o add the following code to the end of the method:

    " Instantiate report_writer_test_double:
    create object report_writer_test_double
             type report_writer_test_double.
    " Register report_writer_test_double as report_writer service:
    service_locator=>singleton->register_report_writer(
      exporting
        report_writer             = report_writer_test_double
      ).

  2. Replace method present_report of class tester with the following code:

    constants    : no_discount    type discount  value 00
                 , alv_classic_list
                                  type abap_bool value abap_false
                 .
    data         : report_writable
                                  type ref
                                    to report_writer_test_double
                 .
    set_bogus_message( ).
    assert_message_is_bogus( ).
    perform present_report using no_discount
                                 alv_classic_list
                                 carrier.
    assert_message_not_bogus( ).
    try.
      report_writable             ?= service_locator=>singleton->report_writer.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method present_report'
        ).
    endtry.
    cl_abap_unit_assert=>assert_equals(
      act                         = report_writable->number_of_lines_written
      exp                         = service_locator=>singleton->flights_organizer->get_flights_count( )
      msg                         = 'Unexpected number of records written'
      ).

-----------------------------------------------------------------------
  ZAUT504I

  1. In methods set_alv_field_catalog and set_alv_function_module_name
     of class tester, apply the following changes:
     o include the following data definition:

    data         : o
                   o
                   o
                 , flights_report_test_double
                                  type ref
                                    to flights_reportable

     o include the following statements prior to the try statement:

    create object flights_report_test_double
             type flights_report_test_double.
    service_locator=>singleton->register_flights_report(
      exporting
        flights_report            = flights_report_test_double
      ).

-----------------------------------------------------------------------
  ZAUT504J

  1. Replace method show_flights of class tester with the following code:

    data         : carrier_id_stack
                                  type table
                                    of s_carr_id
                 , carrier_id_entry
                                  like line
                                    of carrier_id_stack
                 , report_writable
                                  type ref
                                    to report_writer_test_double
                 , expected_count_lines_written
                                  type int4
                 .
    append: lufthansa             to carrier_id_stack
          , united_airlines       to carrier_id_stack
          , american_airlines     to carrier_id_stack
          .
    loop at carrier_id_stack
       into carrier_id_entry.
      carrier                     = carrier_id_entry.
      call method service_locator=>singleton->flights_organizer->get_flights_via_carrier
        exporting
          carrier                 = carrier
          .
      call method service_locator=>singleton->flights_report->show_flights
        exporting
          alv_style_grid          = abap_false
        changing
          flights_stack           = service_locator=>singleton->flights_organizer->flights_stack
          .
      expected_count_lines_written
                                  = expected_count_lines_written
                                  + lines( service_locator=>singleton->flights_organizer->flights_stack ).
    endloop.
    try.
      report_writable             ?= service_locator=>singleton->report_writer.
    catch cx_sy_move_cast_error.
      cl_abap_unit_assert=>fail(
        msg                       = 'Caught exception in test method show_flights'
        ).
    endtry.
    cl_abap_unit_assert=>assert_equals(
      act                         = report_writable->number_of_lines_written
      exp                         = expected_count_lines_written
      msg                         = 'Unexpected number of records written'
      ).

-----------------------------------------------------------------------
  ZAUT601B

  1. Place the following interface ahead of interface report_writable:

interface missing_service_diagnosable.
    types        : missing_service_exception
                                  type ref
                                    to cx_root
                 .
    constants    : access_to_null_service_locator
                                  type string    value `Access to missing service locator occurred at`
                 .
    methods      : diagnose_missing_service
                 .
endinterface.

  2. Place the following test class at the end of the program:

class missing_service_diagn_autester   definition
                                       final
                                       for testing
                                       risk level harmless
                                       duration short
                                       .
  private section.
    data         : messenger_test_double
                                  type ref
                                    to messenger_test_double
                 .
    methods      : setup
                 , confirm_null_service_diagnosed
                 , diagnose_flights_organizer
                     for testing
                 , diagnose_flights_report
                     for testing
                 , diagnose_revenue_calculator
                     for testing
                 , diagnose_discount_calculator
                     for testing
                 , diagnose_report_writer
                     for testing
                 .
endclass.
class missing_service_diagn_autester   implementation.
  method setup.
    data         : service_locator_test_helper
                                  type ref
                                    to service_locator_test_helper
                 .
    create object service_locator_test_helper.
    service_locator_test_helper->clear_all_service_locators( ).
    create object me->messenger_test_double.
    service_locator=>singleton->register_message_dispatcher(
      exporting
        message_dispatcher        = me->messenger_test_double
        ).
  endmethod.
  method confirm_null_service_diagnosed.
    data         : unidentified_message_entry
                                  like line
                                    of me->messenger_test_double->unidentified_message_stack
                 , contains_missing_service_text
                                  type abap_bool
                 .
    loop at me->messenger_test_double->unidentified_message_stack
       into                            unidentified_message_entry
      where type                  eq message_dispatchable=>abort_message.
      if unidentified_message_entry-text
                                  cs missing_service_diagnosable=>access_to_null_service_locator.
        contains_missing_service_text
                                  = abap_true.
      endif.
    endloop.
    cl_abap_unit_assert=>assert_equals(
      exp                         = abap_true
      act                         = contains_missing_service_text
      ).
  endmethod.
  method diagnose_flights_organizer.
    confirm_null_service_diagnosed( ).
  endmethod.
  method diagnose_flights_report.
    confirm_null_service_diagnosed( ).
  endmethod.
  method diagnose_revenue_calculator.
    confirm_null_service_diagnosed( ).
  endmethod.
  method diagnose_discount_calculator.
    confirm_null_service_diagnosed( ).
  endmethod.
  method diagnose_report_writer.
    confirm_null_service_diagnosed( ).
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT601C

  1. Place the following singleton class after class service_locator:

class missing_service_diagnoser        definition
                                       final
                                       create private
                                       .
  public section.
    interfaces   : missing_service_diagnosable
                 .
    aliases      : diagnose_missing_service
                     for missing_service_diagnosable~diagnose_missing_service
                 .
    class-data   : singleton      type ref
                                    to missing_service_diagnoser
                                    read-only
                 .
    data         : missing_service_exception
                                  type missing_service_diagnosable=>missing_service_exception
                 .
    class-methods: class_constructor
                 .
endclass.
class missing_service_diagnoser        implementation.
  method class_constructor.
    create object missing_service_diagnoser=>singleton.
  endmethod.
  method diagnose_missing_service.
    data         : program_name   type syrepid
                 , include_name   type syrepid
                 , source_line    type i
                 , displayable_source_line
                                  type char10
                 , diagnostic     type string
                 .
    missing_service_exception->get_source_position(
      importing
        program_name              = program_name
        include_name              = include_name
        source_line               = source_line
      ).
    displayable_source_line       = source_line.
    shift displayable_source_line left deleting leading space.
    concatenate missing_service_diagnosable=>access_to_null_service_locator
                program_name
                include_name
                displayable_source_line
           into diagnostic
                  separated by space.
    if service_locator=>singleton->message_dispatcher is bound.
      service_locator=>singleton->message_dispatcher->issue_unidentified_message(
        exporting
          message_severity        = message_dispatchable=>abort_message
          text                    = diagnostic
          ).
    else.
      message diagnostic type message_dispatchable=>abort_message.
    endif.
  endmethod.
endclass.

-----------------------------------------------------------------------
  ZAUT601D

  1. Replace the statement in method diagnose_flights_organizer
     of class missing_service_diagn_autester with the following statements:

    data         : flights_count  type flights_organizable=>counter
                 .
    " given a singleton service locator
    "   with all its services cleared by the setup method except for the
    "   message dispatcher, which has been set to use class messenger_test_double,
    try.
      " when we attempt to call a service locator that has not been established
      flights_count               = service_locator=>singleton->flights_organizer->get_flights_count( ).
    catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.
      missing_service_diagnoser=>singleton->diagnose_missing_service( ).
    endtry.
    " then the messenger_test_double should intercept and retain the abend message
    confirm_null_service_diagnosed( ).

-----------------------------------------------------------------------
  ZAUT601E

  1. Replace the statement in method diagnose_flights_report
     of class missing_service_diagn_autester with the following statements:

    data         : flights_stack  type flights_organizable=>flights_list
                 .
    " given a singleton service locator
    "   with all its services cleared by the setup method except for the
    "   message dispatcher, which has been set to use class messenger_test_double,
    try.
      " when we attempt to call a service locator that has not been established
      call method service_locator=>singleton->flights_report->show_flights
        exporting
          alv_style_grid          = abap_false
        changing
          flights_stack           = flights_stack
          .
    catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.
      missing_service_diagnoser=>singleton->diagnose_missing_service( ).
    endtry.
    " then the messenger_test_double should intercept and retain the abend message
    confirm_null_service_diagnosed( ).

-----------------------------------------------------------------------
  ZAUT601F

  1. Replace the statement in method diagnose_revenue_calculator
     of class missing_service_diagn_autester with the following statements:

    data         : flight_revenue
                                type flights_organizable=>flights_row-paymentsum
                 .
    " given a singleton service locator
    "   with all its services cleared by the setup method except for the
    "   message dispatcher, which has been set to use class messenger_test_double,
    try.
      " when we attempt to call a service locator that has not been established
      call method service_locator=>singleton->revenue_calculator->get_flight_revenue
        exporting
          fare_price              = 00
          number_of_passengers    = 00
        importing
          flight_revenue          = flight_revenue
          .
    catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.
      missing_service_diagnoser=>singleton->diagnose_missing_service( ).
    endtry.
    " then the messenger_test_double should intercept and retain the abend message
    confirm_null_service_diagnosed( ).

-----------------------------------------------------------------------
  ZAUT601G

  1. Replace the statement in method diagnose_discount_calculator
     of class missing_service_diagn_autester with the following statements:

    data         : discount_fare
                                type flights_organizable=>flights_row-price
                 .
    " given a singleton service locator
    "   with all its services cleared by the setup method except for the
    "   message dispatcher, which has been set to use class messenger_test_double,
    try.
      " when we attempt to call a service locator that has not been established
      call function service_locator=>singleton->discount_calculator
        exporting
          full_fare               = 00
          discount                = 00
        importing
          discount_fare           = discount_fare
        exceptions
          others                  = 0
          .
    catch cx_sy_dyn_call_illegal_func into missing_service_diagnoser=>singleton->missing_service_exception.
      missing_service_diagnoser=>singleton->diagnose_missing_service( ).
    endtry.
    " then the messenger_test_double should intercept and retain the abend message
    confirm_null_service_diagnosed( ).

-----------------------------------------------------------------------
  ZAUT601H

  1. Replace the statement in method diagnose_report_writer
     of class missing_service_diagn_autester with the following statements:

    " given a singleton service locator
    "   with all its services cleared by the setup method except for the
    "   message dispatcher, which has been set to use class messenger_test_double,
    try.
      " when we attempt to call a service locator that has not been established
      service_locator=>singleton->report_writer->new_line( ).
    catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.
      missing_service_diagnoser=>singleton->diagnose_missing_service( ).
    endtry.
    " then the messenger_test_double should intercept and retain the abend message
    confirm_null_service_diagnosed( ).

-----------------------------------------------------------------------
  ZAUT601I

  1. Change the at select-screen event block in the following way:
     o place the following statement ahead of the perform statement:

  try.

     o place the following statements after the perform statement:

  catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.
    missing_service_diagnoser=>singleton->diagnose_missing_service( ).
  endtry.

  2. Add the following clause to the signature of subroutine process_selection:

                     raising cx_sy_ref_is_initial.

-----------------------------------------------------------------------
  ZAUT601K

  1. Change the at end-of-selection event block in the following way:
     o place the following statement ahead of the perform statement:

  try.

     o place the following statements after the perform statement:

  catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.
    missing_service_diagnoser=>singleton->diagnose_missing_service( ).
  endtry.

  2. Add the following clause to the signatures of subroutines present_report and adjust_flight_revenue:

                  raising cx_sy_ref_is_initial.

-----------------------------------------------------------------------
  ZAUT601M

  1. Add the following clause to the signature of subroutine show_flights_count:

                      raising cx_sy_ref_is_initial.

-----------------------------------------------------------------------
  ZAUT601P

  1. Add the following clause to the signature of method show_flights of interface flights_reportable:

                     raising
                       cx_sy_ref_is_initial

-----------------------------------------------------------------------
  ZAUT601R

  1. Change the catch clause in the end-of-selection event block from ...

  catch cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.

     ... to:

  catch cx_sy_dyn_call_illegal_func
        cx_sy_ref_is_initial into missing_service_diagnoser=>singleton->missing_service_exception.

  2. Change the raising clause of subroutine present_report from ...

                  raising cx_sy_ref_is_initial.

     ... to:

                  raising cx_sy_ref_is_initial
                          cx_sy_dyn_call_illegal_func.

  3. Add the following clause to the signature of subroutine apply_flight_discount:

                         raising cx_sy_dyn_call_illegal_func.

-----------------------------------------------------------------------
  ZAUT701A

  1. Add a new unit test method adjust_flight_revenue_via_atdf to class tester:
     o add method definition for adjust_flight_revenue_via_atdf to the private
       section of class tester following the definition for method adjust_flight_revenue:

    methods      : o
                   o
                   o
                 , adjust_flight_revenue_via_atdf
                     for testing

     o include the following method implementation after the implementation
       for method adjust_flight_revenue:

  method adjust_flight_revenue_via_atdf.
    constants    : revenue_value_12345
                                  type flights_organizable=>flights_row-paymentsum
                                                 value 12345
                 .
    data         : revenue_calculator_test_double
                                  type ref
                                    to zif_flight_revenue_calculable
                 , test_double_configurer
                                  type ref
                                    to if_abap_testdouble_config
                 , flight_revenue type flights_organizable=>flights_row-paymentsum
                 .
    " Given a test double instantiated using the ABAP Test Double Framework (ATDF) to recognize
    "   the methods defined for global interface zif_flight_revenue_calculable ...
    revenue_calculator_test_double
                                  ?= cl_abap_testdouble=>create( 'zif_flight_revenue_calculable' ).
    " ... and configured to supply the following value for calls to methods defined with a parameter
    "   named flight_revenue ...
    test_double_configurer        = cl_abap_testdouble=>configure_call( revenue_calculator_test_double ).
    test_double_configurer        = test_double_configurer->set_parameter(
                                      name  = 'flight_revenue'
                                      value = revenue_value_12345
                                      ).
    " ... and configured to associate the following calling parameters and their respective
    "   values for a call to method get_flight_revenue with the parameter configured in the
    "   previous statement
    "   (notice with this call that the flight_revenue parameter of the get_flights_revenue
    "   method is not specified) ...
    revenue_calculator_test_double->get_flight_revenue(
      exporting
        fare_price                = 00
        number_of_passengers      = 00
      ).
    " When the ATDF test double receives a call to the method configured in the previous statement
    "   with calling parameter values matching those configured in the previous statement
    "   (notice with this call that the flight_revenue parameter of the get_flights_revenue
    "   method is specified) ...
    revenue_calculator_test_double->get_flight_revenue(
      exporting
        fare_price                = 00
        number_of_passengers      = 00
      importing
        flight_revenue            = flight_revenue
      ).
    " Then the value imported into field flight_revenue should match the value
    "   used to configure the test double with the parameter named flight_revenue:
    cl_abap_unit_assert=>assert_equals(
      act                         = flight_revenue + 01
      exp                         = revenue_value_12345
      msg                         = 'Flight revenue value other than expected'
      ).
  endmethod.

-----------------------------------------------------------------------
  ZAUT701B

  1. In unit test method adjust_flight_revenue_via_atdf of class tester, change
     the "act" parameter on the call to method cl_abap_unit_assert=>assert_equal from ...

      act                         = flight_revenue + 01

     ... to:

      act                         = flight_revenue

-----------------------------------------------------------------------
  ZAUT701C

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o replace the following two statements ...

    test_double_configurer        = cl_abap_testdouble=>configure_call( revenue_calculator_test_double ).
    test_double_configurer        = test_double_configurer->set_parameter(
                                      name  = 'flight_revenue'
                                      value = revenue_value_12345
                                      ).

     ... with the following single chained method call statement:

    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_12345
      ).

-----------------------------------------------------------------------
  ZAUT701D

  1. Replace the implementation of unit test method adjust_flight_revenue_via_atdf
     of class tester with the following statements:

  method adjust_flight_revenue_via_atdf.
    constants    : revenue_value_12345
                                  type flights_organizable=>flights_row-paymentsum
                                                 value 12345
                 .
    data         : revenue_calculator_test_double
                                  type ref
                                    to zif_flight_revenue_calculable
                 , flights_entry  like line
                                    of service_locator=>singleton->flights_organizer->flights_stack
                 .
    " Given a test double instantiated using the ABAP Test Double Framework (ATDF) to recognize
    "   the methods defined for global interface zif_flight_revenue_calculable ...
    revenue_calculator_test_double
                                  ?= cl_abap_testdouble=>create( 'zif_flight_revenue_calculable' ).
    " ... and configured to supply the following value for calls to methods defined with a parameter
    "   named flight_revenue ...
    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_12345
      ).
    " ... and configured to associate the following calling parameters and their respective
    "   values for a call to method get_flight_revenue with the parameter configured in the
    "   previous statement
    "   (notice with this call that the flight_revenue parameter of the get_flights_revenue
    "   method is not specified) ...
    revenue_calculator_test_double->get_flight_revenue(
      exporting
        fare_price                = 00
        number_of_passengers      = 00
      ).
    " ... and this ATDF test double registered as the revenue calculator service ...
    service_locator=>singleton->register_revenue_calculator(
      exporting
        revenue_calculator        = revenue_calculator_test_double
        ).
    " When the adjust_flight_revenue subruoutine is called ...
    perform adjust_flight_revenue changing service_locator=>singleton->flights_organizer->flights_stack.
    " Then the revenue calculated for each flight should match the value
    "   used to configure the test double with the parameter named flight_revenue:
    loop at service_locator=>singleton->flights_organizer->flights_stack
       into flights_entry.
      cl_abap_unit_assert=>assert_equals(
        act                       = flights_entry-paymentsum
        exp                       = revenue_value_12345
        msg                       = 'Flight revenue value other than expected'
        ).
    endloop.
  endmethod.

-----------------------------------------------------------------------
  ZAUT701E

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o add data definition failure_message after the one for revenue_calculator_test_double:

    data         : o
                   o
                   o
                 , failure_message
                                  type string

     o place the following statements as the first statements in the loop construct:

      failure_message             = sy-tabix.
      shift failure_message left deleting leading space.
      concatenate 'Flight revenue value other than expected on flights entry'
                  failure_message
             into failure_message
                    separated by space.

     o replace the msg parameter of the call to method assert_equals of class cl_abap_unit_assert with:

        msg                       = failure_message

-----------------------------------------------------------------------
  ZAUT701F

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o replace the compound method call statement and its preceding 2 comment lines with the following:

    " ... and configured to supply the following value for calls to methods defined with a parameter
    "   named flight_revenue, ignoring any parameters specified ...
    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_12345
      )->ignore_all_parameters(
      ).

-----------------------------------------------------------------------
  ZAUT701G

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o add constants definition revenue_value_23456 after the one for revenue_value_12345:

    constants    : o
                   o
                   o
                 , revenue_value_23456
                                  type flights_organizable=>flights_row-paymentsum
                                                 value 23456

     o replace the compound method call statement and its preceding 2 comment
       lines with the following set of statements:

    " ... and configured to supply the following value for the first 2 calls to methods defined with a parameter
    "   named flight_revenue, ignoring any parameters specified ...
    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_12345
      )->times( 2
      )->ignore_all_parameters(
      ).
    " ... and configured to associate the following calling parameters and their respective
    "   values for a call to method get_flight_revenue with the parameter configured in the
    "   previous statement
    "   (notice with this call that the flight_revenue parameter of the get_flights_revenue
    "   method is not specified) ...
    revenue_calculator_test_double->get_flight_revenue(
      exporting
        fare_price                = 00
        number_of_passengers      = 00
      ).
    " ... and configured to supply the following value for any subsequent calls to methods defined with a parameter
    "   named flight_revenue, ignoring any parameters specified ...
    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_23456
      )->ignore_all_parameters(
      ).

-----------------------------------------------------------------------
  ZAUT701H

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o replace the call to method assert_equals of class cl_abap_unit_assert with the following set of statements:

      if sy-tabix le 02.
        " The first 2 calls to the ATDF test double for revenue calculator will cause the
        "   following value to be returned:
        cl_abap_unit_assert=>assert_equals(
          act                     = flights_entry-paymentsum
          exp                     = revenue_value_12345
          msg                     = failure_message
          ).
      else.
        " Subsequent calls to the ATDF test double for revenue calculator will cause the
        "   following value to be returned:
        cl_abap_unit_assert=>assert_equals(
          act                     = flights_entry-paymentsum
          exp                     = revenue_value_23456
          msg                     = failure_message
          ).
      endif.

-----------------------------------------------------------------------
  ZAUT701I

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o replace the following set of statement ...

    "   named flight_revenue, ignoring any parameters specified ...
    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_12345
      )->times( 2
      )->ignore_all_parameters(
      ).

       ... with this set of statements:

    "   named flight_revenue, ignoring any parameters specified, and expecting the number of calls to be
    "   the same as the number of rows in table service_locator=>singleton->flights_organizer->flights_stack ...
    cl_abap_testdouble=>configure_call( revenue_calculator_test_double
      )->set_parameter( name  = 'flight_revenue'
                        value = revenue_value_12345
      )->times( 2
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_times( lines( service_locator=>singleton->flights_organizer->flights_stack ) + 01
      ).

     o add the following statements to the end of the method:

    " Verify interactions on testdouble:
    cl_abap_testdouble=>verify_expectations( service_locator=>singleton->revenue_calculator ).

-----------------------------------------------------------------------
  ZAUT701J

  1. Apply the following changes to unit test method adjust_flight_revenue_via_atdf of class tester:
     o replace the statement ...

      )->is_called_times( lines( service_locator=>singleton->flights_organizer->flights_stack ) + 01

       ... with the statement:

      )->is_called_times( lines( service_locator=>singleton->flights_organizer->flights_stack )

-----------------------------------------------------------------------
